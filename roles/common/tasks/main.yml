# Role common main
---
- name: Set timezone
  timezone:
    hwclock: UTC
    name: '{{ common_time_zone }}'
  tags: [common, time]

- name: Getting all hostkeys
  when: hostvars[item].ansible_facts[common_default_network_device] is defined
  run_once: true
  ansible.builtin.set_fact:
    all_hostkeys: "{{ all_hostkeys | default([]) + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ssh-rsa ' + hostvars[item].ansible_facts.ssh_host_key_rsa_public] + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ssh-ed25519 ' + hostvars[item].ansible_facts.ssh_host_key_ed25519_public] + [hostvars[item].ansible_facts[common_default_network_device].ipv4.address + ' ecdsa-sha2-nistp256 ' + hostvars[item].ansible_facts.ssh_host_key_ecdsa_public] }}"
  with_items: '{{ groups.all }}'
  tags: [common, hostnames]

- name: Setup ssh options
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^{{ item }}$'
    line: '{{ item }}'
  loop: '{{ sshd_options }}'
  notify: Restart SSHD
  tags: [common, ssh]

- name: Add Debian Backports apt repo
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main"
    state: present
    filename: debian-backports
  tags: [common, apt]

- name: Install aptitude using apt
  ansible.builtin.apt:
    name: aptitude
    state: latest
    update_cache: true
  tags: [common, apt]

- name: Install required system packages
  ansible.builtin.apt:
    name: '{{ item }}'
    state: latest
    install_recommends: false
  loop:
    - 'software-properties-common'
    - 'apt-transport-https'
    - 'ca-certificates'
    - 'wget'
    - 'curl'
    - 'tar'
    - 'jq'
    - 'gzip'
    - 'pigz'
    - 'pass'
    - 'rsync'
    - 'gnupg'
    - 'gnupg2'
    - 'openssl'
    - 'apparmor'
    - 'libffi-dev'
    - 'lsb-release'
    - 'python3-pip'
    - 'policycoreutils'
    - 'selinux-policy-default'
    - 'unattended-upgrades'
    - 'python3-requests'
    - 'python3-jsondiff'
    - 'selinux-basics '
    - 'python3-yaml'
    - 'unzip'
    - 'git'
  tags: [common, apt]

- name: Install additional packages
  ansible.builtin.apt:
    name: '{{ item }}'
    state: latest
    install_recommends: false
  loop: '{{ common_extra_packages }}'
  tags: [common, apt]

- name: Remove specified packages
  ansible.builtin.apt:
    name: '{{ item }}'
    state: absent
  loop: '{{ common_delete_packages }}'
  tags: [common, apt]

- name: Setup UnattendedUpgrades
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    create: true
    state: '{{ common_unattended_upgrades_state }}'
    line: '{{ item }}'
    mode: '0644'
  loop:
    - APT::Periodic::Update-Package-Lists "1";
    - APT::Periodic::Unattended-Upgrade "1";
  tags: [common, apt]

# - name: Enable SELinux in enforcing mode
#   ansible.posix.selinux:
#     policy: '{{ common_selinux_policy }}'
#     state: '{{ common_selinux_mode }}'
#   tags: [common, selinux]

- name: Set hostnames
  ansible.builtin.import_tasks: install-hostnames.yml
  tags: [common, hostnames]

- name: Add ssh keys
  ansible.builtin.import_tasks: set-ssh-keys.yml
  tags: [common, ssh-keys]

- name: Disable swap
  ansible.builtin.command: swapoff -a
  register: c_out
  changed_when: c_out.stdout != ""
  tags: [common, swap]

- name: Remove swap in /etc/fstab
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '\sswap\s'
    state: absent
  tags: [common, swap]

- name: Mount devices
  mount:
    path: '{{ item.destination }}'
    src: '{{ item.source }}'
    fstype: '{{ item.filesystem }}'
    opts: '{{ item.options }}'
    state: '{{ item.state | default("mounted") }}'
    backup: true
    boot: true
  loop: '{{ common_device_mounts }}'
  tags: [common, mounts]

- name: Ensue cgroup memory support
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX='
    line: GRUB_CMDLINE_LINUX=""
  tags: [common, sys]
  notify: Update grub

- name: Setting system limits
  pam_limits:
    domain: '{{ item.user }}'
    limit_type: '{{ item.type | default("-") }}'
    limit_item: '{{ item.limit }}'
    value: '{{ item.value }}'
    comment: '{{ item.comment | default(omit) }}'
  loop: '{{ common_limits }}'
  tags: [common, sys]

- name: Creates backup directory
  ansible.builtin.file:
    path: /backup_dumps
    state: directory
  tags: [common, sys]

- name: Set floating IPs
  when: common_floating_ips | length > 0
  ansible.builtin.import_tasks: shared/set-floting-ip.yml
  vars:
    floating_ips: '{{ common_floating_ips }}'
  tags: [common, ingress-ip]

- name: Set network interfaces
  ansible.builtin.blockinfile:
    path: /etc/network/interfaces
    block: |
      auto {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
      iface {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }} inet static
        mtu {{ item.mtu | default(1400) }}
        address {{ item.address }}
        netmask {{ item.netmask | default("255.255.255.0") }}
        up ip route add {{ item.cloud_net }} via {{ item.subnet }} dev {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
        down ip route del {{ item.cloud_net }} via {{ item.subnet }} dev {{ item.interface }}{{ "." + item.virtual_id | string if(item.virtual_id is defined) }}
        {{ "vlan-raw-device " + item.interface | string if(item.virtual_id is defined) }}
  loop: '{{ common_network_interfaces }}'
  notify: Restart network service
  tags: [common, network]

- name: Ensure logfile for cron exists
  ansible.builtin.lineinfile:
    path: /var/log/cron.log
    line: \#Cron Log file
    create: true
    mode: '0644'
  tags: [common, cron]

- name: Install cron jobs
  ansible.builtin.import_tasks: shared/install-cron-jobs.yml
  vars:
    cron_jobs: '{{ common_cron_jobs }}'
  tags: [common, cron]

- name: Ensure handlers are notified now
  ansible.builtin.meta: flush_handlers
  tags: [common]
