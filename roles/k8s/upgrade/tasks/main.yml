# Main k8s upgrade setup
---
- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Assert that cluster was installed with kubeadm
  ansible.builtin.assert:
    that:
      - '"kubeadm" in ansible_facts.packages'
    fail_msg: "Cluster not installed with kubeadm"
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Update kubeadm
  ansible.builtin.apt:
    name:
      - kubeadm{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}
    state: present
    update_cache: true
    cache_valid_time: 86400 # equal to 24h
    install_recommends: false
    allow_downgrade: true
    autoremove: true
    allow_change_held_packages: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Set kubeadm to fixed versions
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Get cluster info
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: '{{ inventory_hostname }}'
    kubeconfig: '{{ k8s_kubeconfig | default("/etc/kubernetes/admin.conf") }}'
  delegate_to: '{{ groups.k8s_control_plane | flatten | first }}'
  register: __k8s_node_info
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Plan upgrade
  when:
    - groups.k8s_control_plane | flatten | first == inventory_hostname
    - __k8s_node_info.resources[0].status.nodeInfo.kubeletVersion != "v" + k8s_version
  ansible.builtin.command: kubeadm upgrade plan
  register: __k8s_cp_upgrade_plan
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Debug - Kubeadm plan upgrade
  when:
    - groups.k8s_control_plane | flatten | first == inventory_hostname
    - __k8s_node_info.resources[0].status.nodeInfo.kubeletVersion != "v" + k8s_version
  ansible.builtin.debug:
    var: __k8s_cp_upgrade_plan
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Apply upgrade - first control-plane
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  ansible.builtin.command: "kubeadm upgrade apply v{{ k8s_version }} --yes"
  register: __k8s_cp_upgrade_exe
  throttle: 1
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Debug - Kubeadm apply
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  ansible.builtin.debug:
    var: __k8s_cp_upgrade_exe
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Apply upgrade on other cp nodes
  when:
    - groups.k8s_control_plane | flatten | first != inventory_hostname
    - __k8s_node_info.resources[0].status.nodeInfo.kubeletVersion != "v" + k8s_version
  ansible.builtin.command: "kubeadm upgrade node"
  register: __k8s_cp_upgrade_exe_other
  throttle: 1
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Refresh cluster info
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: '{{ inventory_hostname }}'
    kubeconfig: '{{ k8s_kubeconfig | default("/etc/kubernetes/admin.conf") }}'
  delegate_to: '{{ groups.k8s_control_plane | flatten | first }}'
  register: __k8s_node_info
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Saving cluster info
  ansible.builtin.set_fact:
    k8s_node_info: '{{ __k8s_node_info.resources[0].status.nodeInfo }}'
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]

- name: Upgrade kubelet's
  ansible.builtin.include_tasks: upgrade-kubelet.yml
  when: hostvars[__k8s_upgrade_node_name].k8s_node_info.kubeletVersion != "v" + k8s_version
  run_once: true
  loop: '{{ groups.k8s | flatten }}'
  loop_control:
    loop_var: __k8s_upgrade_node_name
    pause: 5
  tags: [k8s, k8s-upgrade, k8s-upgrade-cp]
