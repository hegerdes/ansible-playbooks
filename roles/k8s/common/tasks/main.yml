# Main k8s Setup
---
- name: Wait for cloud init to finish
  community.general.cloud_init_data_facts:
    filter: status
  register: _cloud_init_res
  until: "_cloud_init_res.cloud_init_data_facts.status.v1.stage is defined and not _cloud_init_res.cloud_init_data_facts.status.v1.stage"
  retries: 25
  delay: 10
  tags: [k8s, k8s-prepare, k8s-base]

- name: Set a hostname
  ansible.builtin.hostname:
    name: '{{ inventory_hostname }}'
  tags: [k8s, k8s-prepare, k8s-base]

# - name: Enable SELinux in enforcing mode
#   ansible.posix.selinux:
#     policy: '{{ k8s_selinux_policy }}'
#     state: '{{ k8s_selinux_mode }}'
#   tags: [k8s, k8s-prepare, k8s-base, selinux]

- name: Add Debian Backports apt repo
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main"
    state: present
    filename: debian-backports
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Ensue required packages are installed
  ansible.builtin.apt:
    name: [gnupg, git, lsb-release, ca-certificates, curl, apparmor, python3-kubernetes, apt-transport-https, jq, unzip, wget, socat, mtr-tiny, logrotate, open-iscsi, ipvsadm, dbus, libyajl2, policycoreutils, selinux-basics, selinux-policy-default, auditd, semodule-utils, setools, apparmor-profiles-extra]
    state: present
    update_cache: true
    install_recommends: false
    cache_valid_time: 86400
    autoremove: true
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Setup UnattendedUpgrades
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    create: true
    state: '{{ k8s_unattended_upgrades_state }}'
    line: '{{ item }}'
    mode: '0644'
  loop:
    - APT::Periodic::Update-Package-Lists "1";
    - APT::Periodic::Unattended-Upgrade "1";
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  loop: [swap, none]
  tags: [k8s, k8s-prepare, k8s-base]

- name: Disable swap
  ansible.builtin.command: swapoff -a
  register: __k8s_swap_disable_tmp
  changed_when: __k8s_swap_disable_tmp.stdout != ""
  tags: [k8s, k8s-prepare, k8s-base]

- name: Add entries to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: '{{ item.ip }} {{ item.name }}'
    create: true
    state: '{{ item.state | default("present")}}'
  loop: '{{ k8s_etc_hosts }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Create conf dirs
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
  loop:
    - '/srv'
    - '/etc/apt/keyrings'
    - '/etc/systemd/system/docker.service.d'
    - '/etc/systemd/system/kubelet.service.d'
    - '/usr/wasmedge/lib'
    - '{{ ansible_facts.env.HOME }}/.kube'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Ensure br_netfilter and overlay is enabled
  community.general.modprobe:
    name: '{{ item }}'
    state: present
    persistent: present
  loop: [br_netfilter, overlay]
  tags: [k8s, k8s-prepare, k8s-base]

- name: Set sysctl parameters
  ansible.posix.sysctl:
    name: '{{ item.key }}'
    value: '{{ item.val }}'
    state: '{{ item.state | default("present") }}'
    sysctl_set: true
    reload: true
  with_items: '{{ k8s_common_sysctl_conf }}'
  loop_control:
    label: "{{ item.key }}={{ item.val }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Setting system limits
  pam_limits:
    domain: '{{ item.user }}'
    limit_type: '{{ item.type | default("-") }}'
    limit_item: '{{ item.limit }}'
    value: '{{ item.value }}'
    comment: '{{ item.comment | default(omit) }}'
  loop: '{{ k8s_system_limits }}'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Include install crun
  ansible.builtin.include_tasks: 'crun{{ "_wasm" if(k8s_crun_with_wasm) }}.yml'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Adding apt GPG Keys
  ansible.builtin.apt_key:
    url: '{{ item }}'
    state: present
  loop:
    - 'https://download.docker.com/linux/{{ ansible_facts.distribution | lower }}/gpg'
    - 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
    - 'https://gvisor.dev/archive.key'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Add Docker/K8s/gVisor repository
  ansible.builtin.apt_repository:
    repo: '{{ item.repo }}'
    update_cache: true
    state: '{{ item.state | default("present") }}'
    filename: '{{ item.name }}'
  with_items:
    - name: docker
      repo: 'deb https://download.docker.com/linux/{{ ansible_facts.distribution | lower }} {{ ansible_facts.lsb.codename }} stable'
    - name: k8s
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    - name: gvisor
      repo: deb https://storage.googleapis.com/gvisor/releases release main
      state: '{{ "present" if(k8s_install_gvisor) else "absent" }}'
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Print k8s package version info
  ansible.builtin.debug:
    msg: 'Installing the {{ k8s_version if (k8s_version != "latest") else "latest" }} version of k8s'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Install container runtime, kubelet and admin tools
  ansible.builtin.apt:
    name:
      - 'kubeadm{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}'
      - 'kubectl{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}'
      - 'kubelet{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}'
      - 'containerd.io{{ "=" + k8s_containerd_version + "-1" if (k8s_containerd_version != "latest") }}'
      - '{{ "runsc" if(k8s_install_gvisor) }}'
    state: present
    update_cache: true
    cache_valid_time: 86400     # equal to 24h
    install_recommends: false
    allow_downgrade: true
    autoremove: true
    allow_change_held_packages : true
  ignore_errors: '{{ ansible_check_mode }}'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Set packages to fixed versions
  ansible.builtin.dpkg_selections:
    name: '{{ item }}'
    selection: hold
  tags: [k8s, k8s-prepare, k8s-base, apt]
  loop: [kubeadm, kubectl, kubelet, containerd.io]

- name: Copy kubelet/docker/containerd/crun/runsc-conf
  ansible.builtin.template:
    src: '{{ item.src }}.j2'
    dest: '{{ item.src }}'
    mode: '0600'
    owner: root
    group: root
  with_items:
    - { src: 00-docker-cgroup.conf, dst: /etc/systemd/system/docker.service.d/00-docker-cgroup.conf }
    - { src: 20-kubelet-service.conf, dst: /etc/systemd/system/kubelet.service.d/20-kubelet-service.conf }
    - { src: containerd-config.toml, dst: /etc/containerd/config.toml }
    - { src: runsc.toml, dst: /etc/containerd/runsc.toml }
    - { src: crictl.yaml, dst: /etc/crictl.yaml }
  register: __run_conf
  tags: [k8s, k8s-prepare, k8s-base]

- name: Restart containerd
  when: __run_conf.changed
  ansible.builtin.service:
    name: containerd
    daemon_reload: true
    state: restarted
  ignore_errors: '{{ ansible_check_mode }}'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Enable kubectl bash completion
  ansible.builtin.lineinfile:
    path: '{{ ansible_facts.env.HOME }}/.bashrc'
    line: source <(kubectl completion bash)
  tags: [k8s, k8s-prepare, k8s-base]

- name: Pre-pull images
  ansible.builtin.command: |
    kubeadm config images pull \
      {{ "--kubernetes-version " + k8s_version if (k8s_version != "latest") }} \
      {{ "--image-repository " + k8s_image_repo if (k8s_image_repo | default("") != "") }}
  register: __k8s_pull_res
  changed_when: ((__k8s_pull_res.end[:-7] | to_datetime) - (__k8s_pull_res.start[:-7] | to_datetime)).total_seconds() > 5
  tags: [k8s, k8s-prepare, k8s-base]

- name: Copy systemd sys-fs-bpf for cilium cni
  when: k8s_cni | lower == 'cilium'
  # See https://docs.cilium.io/en/v1.13/operations/system_requirements/#systemd-based-distributions
  ansible.builtin.copy:
    src: '{{ item.src }}'
    dest: '{{ item.dst }}'
    mode: '0600'
    owner: root
    group: root
  with_items:
    - {src: cilium-networkd.conf, dst: /etc/systemd/networkd.conf}
  tags: [k8s, k8s-prepare, k8s-base, k8s-init, k8-cri, k8s-cilium]
