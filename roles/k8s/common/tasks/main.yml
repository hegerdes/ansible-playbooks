# Main k8s Setup
---
- name: Wait for cloud init to finish
  community.general.cloud_init_data_facts:
    filter: status
  register: _cloud_init_res
  until: "_cloud_init_res.cloud_init_data_facts.status.v1.stage is defined and not _cloud_init_res.cloud_init_data_facts.status.v1.stage"
  retries: 25
  delay: 10
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Ensue required packages are installed
  ansible.builtin.apt:
    name: [gnupg, git, lsb-release, ca-certificates, curl, apparmor, python3-kubernetes, apt-transport-https, jq, unzip, wget, socat, mtr, logrotate, open-iscsi, ipvsadm, dbus]
    state: present
    update_cache: true
    install_recommends: false
    cache_valid_time: 86400
    autoremove: true
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none
  tags: [k8s, k8s-prepare, k8s-base]

- name: Disable swap
  ansible.builtin.command: swapoff -a
  register: k8s_swap_diable_tmp
  changed_when: k8s_swap_diable_tmp.stdout != ""
  tags: [k8s, k8s-prepare, k8s-base]

- name: Add entries to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: '{{ item.ip }} {{ item.name }}'
    create: true
  loop: '{{ k8s_etc_hosts }}'
  loop_control:
    label: '{{ item.name }}'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Create conf dirs
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
  loop:
    - /srv
    - /etc/apt/keyrings
    - /etc/systemd/system/docker.service.d
    - /etc/systemd/system/kubelet.service.d
  tags: [k8s, k8s-prepare, k8s-base]

- name: Copy docker and kubelet service conf
  ansible.builtin.template:
    src: '{{ item.src }}.j2'
    dest: '{{ item.dst }}/{{ item.src }}'
    mode: '0644'
  with_items:
    - { src: 00-docker-cgroup.conf, dst: /etc/systemd/system/docker.service.d }
    - { src: 20-kublet-service.conf, dst: /etc/systemd/system/kubelet.service.d }
  tags: [k8s, k8s-prepare, k8s-base]

- name: Ensure br_netfilter and overlay is enabled
  community.general.modprobe:
    name: '{{ item }}'
    state: present
  loop: [br_netfilter, overlay]
  tags: [k8s, k8s-prepare, k8s-base]

- name: Allow container ip forwording
  ansible.posix.sysctl:
    name: '{{ item.key }}'
    value: '{{ item.val }}'
    state: present
    sysctl_set: true
    reload: true
  with_items:
    - { key: net.ipv4.ip_forward, val: 1}
    - { key: net.bridge.bridge-nf-call-iptables, val: 1}
    - { key: net.bridge.bridge-nf-call-ip6tables, val: 1}
    - { key: net.ipv6.conf.default.forwarding, val: 1}
    - { key: kernel.panic, val: 10}
    - { key: net.ipv4.conf.all.rp_filter, val: 0}
  tags: [k8s, k8s-prepare, k8s-base]
  loop_control:
    label: "{{ item.key }}={{ item.val }}"

- name: Install crun
  ansible.builtin.get_url:
    url: https://github.com/containers/crun/releases/download/{{ k8s_crun_version }}/crun-{{ k8s_crun_version }}-linux-amd64
    dest: /usr/local/sbin/crun
    mode: '0754'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Adding apt GPG Keys
  ansible.builtin.apt_key:
    url: '{{ item }}'
    state: present
  loop:
    - 'https://download.docker.com/linux/{{ ansible_facts.distribution | lower }}/gpg'
    - 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Add Docker/K8s repository
  ansible.builtin.apt_repository:
    repo: '{{ item.repo }}'
    update_cache: true
    state: present
    filename: '{{ item.name }}.list'
  with_items:
    - name: docker
      repo: 'deb https://download.docker.com/linux/{{ ansible_facts.distribution | lower }} {{ ansible_facts.lsb.codename }} stable'
    - name: k8s
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Print k8s package version info
  run_once: true
  ansible.builtin.debug:
    msg: 'Installing the {{ k8s_version if (k8s_version != "latest") else "latest" }} packages for k8s'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Install container runtime, kubelet and admin tools
  ansible.builtin.apt:
    name:
      - kubeadm{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}
      - kubectl{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}
      - kubelet{{ "=" + k8s_version + "-00" if (k8s_version != "latest") }}
      - containerd.io{{ "=" + k8s_containerd_version + "-1" if (k8s_containerd_version != "latest") }}
    state: present
    update_cache: true
    cache_valid_time: 86400     # equal to 24h
    install_recommends: false
    allow_downgrade: true
    autoremove: true
    allow_change_held_packages : true
  ignore_errors: '{{ ansible_check_mode }}'
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Set packages to fixed versions
  ansible.builtin.dpkg_selections:
    name: '{{ item }}'
    selection: hold
  tags: [k8s, k8s-prepare, k8s-base, apt]
  loop: [kubeadm, kubectl, kubelet, containerd.io]

- name: Copy containerd-conf
  ansible.builtin.template:
    src: containerd-config.toml.j2
    dest: /etc/containerd/config.toml
    mode: '0644'
  tags: [k8s, k8s-prepare, k8s-base]
  register: run_containerd_conf

- name: Restart containerd
  when: run_containerd_conf.changed
  ansible.builtin.service:
    name: containerd
    daemon_reload: true
    state: restarted
  ignore_errors: '{{ ansible_check_mode }}'
  tags: [k8s, k8s-prepare, k8s-base]
