# Main k8s Setup
---
- name: k8s common | Wait for cloud init to finish
  community.general.cloud_init_data_facts:
    filter: status
  register: _cloud_init_res
  until: >-
    _cloud_init_res.cloud_init_data_facts.status.v1.stage is defined
    and not
    _cloud_init_res.cloud_init_data_facts.status.v1.stage
  retries: 25
  delay: 10
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Set a hostname
  when: k8s_inventory_as_hostname and inventory_hostname != "localhost"
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Add Debian Backports apt repo
  when: ansible_facts.distribution == "Debian"
  ansible.builtin.deb822_repository:
    name: "{{ ansible_distribution_release }}-backports"
    types: deb
    state: present
    uris: http://deb.debian.org/debian
    suites: "{{ ansible_distribution_release }}-backports"
    components: [main]
  tags: [k8s, k8s-prepare, k8s-base, apt]
  register: __k8s_apt_backports

- name: k8s common | Ensure required packages are installed
  ansible.builtin.apt:
    name: [
        gnupg,
        lsb-release,
        ca-certificates,
        curl,
        pigz, # fast decompress for container images
        isal, # even faster decompress for container images
        cryptsetup, # support LUKS disk encryption
        apparmor,
        apparmor-profiles-extra,
        apt-transport-https,
        jq, # json parsing and validating
        yq, # yaml parsing and validating
        unzip,
        socat,
        mtr-tiny,
        logrotate,
        fuse,
        open-iscsi,
        ipvsadm,
        auditd,
        dbus,
        libyajl2, # Needed for youki wasm
        # policycoreutils,
        # selinux-basics,
        # selinux-policy-default,
        # semodule-utils,
        # setools,
      ]
    state: present
    update_cache: true
    install_recommends: false
    autoremove: true
    cache_valid_time: "{{ 0 if(__k8s_apt_backports.changed) else 86400 }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: k8s common | Ensure latest kernel
  when: k8s_ensure_min_kernel_version != "none"
  ansible.builtin.include_tasks:
    file: update_kernel.yml
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: k8s common | Ensure unneeded packages are absent
  when: k8s_absent_packages | length != 0
  ansible.builtin.apt:
    name: "{{ k8s_absent_packages }}"
    state: absent
    autoremove: true
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: k8s common | Setup UnattendedUpgrades
  ansible.builtin.blockinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    create: true
    state: "{{ k8s_unattended_upgrades_state }}"
    block: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Unattended-Upgrade "1";
    mode: "0644"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: k8s common | Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: swap
    fstype: swap
    state: absent
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Disable swap
  ansible.builtin.command: swapoff -a
  register: __k8s_swap_disable_tmp
  changed_when: __k8s_swap_disable_tmp.stdout != ""
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Add entries to /etc/hosts
  ansible.builtin.lineinfile:
    create: true
    path: /etc/hosts
    line: "{{ item.ip }} {{ item.name }}"
    state: "{{ item.state | default('present') }}"
  loop: "{{ k8s_etc_hosts }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Create config dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: "{{ item.mode | default('0644') }}"
    state: directory
  with_items:
    - { path: "/etc/containerd" }
    - { path: "/srv", mode: "0750" }
    - { path: "{{ target_data_dir | default('') }}/srv/patches", mode: "0750" }
    - { path: "{{ ansible_facts.env.HOME }}/.kube", mode: "0700" }
    - { path: "/etc/kubernetes/extras", mode: "0775" }
    - { path: "/etc/kubernetes/kubelet.conf.d", mode: "0744" }
    - { path: "/etc/systemd/system/kubelet.service.d", mode: "0600" }
    - { path: "/opt/cni/bin", mode: "0755" }
    - { path: "/var/lib/kubelet" }
    - { path: "/usr/wasmedge/lib" }
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Ensure kernel modules are enabled
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop: "{{ k8s_kernel_modules | flatten }}"
  vars:
    k8s_kernel_modules:
      - [br_netfilter, overlay]
      - "{{ ['vhost_vsock', 'vhost_net'] if(k8s_install_kata_containers) else [] }}"
      - "{{ ['fuse'] if(k8s_install_stargz) else [] }}"
  register: __k8s_modprobe
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Set sysctl parameters
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.val }}"
    state: '{{ item.state | default("present") }}'
    sysctl_set: true
    reload: true
  with_items: "{{ k8s_common_sysctl_conf }}"
  loop_control:
    label: "{{ item.key }}={{ item.val }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Setting system limits
  pam_limits:
    domain: "{{ item.user }}"
    limit_type: '{{ item.type | default("-") }}'
    limit_item: "{{ item.limit }}"
    value: "{{ item.value }}"
    comment: "{{ item.comment | default(omit) }}"
  loop: "{{ k8s_system_limits }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Print used version info
  ansible.builtin.debug:
    msg: |
      Installing:
        k8s version: {{ k8s_version if (k8s_version != "latest") else "latest" }}
        containerd version: {{ k8s_containerd_version }}
        container runtime: {{ k8s_cri }}
        gvisor enabled: {{ k8s_install_gvisor }}
        wasmedge enabled: {{ k8s_install_wasi }}
        youki enabled: {{ k8s_install_youki }}
        youki with wasm: {{ k8s_youki_with_wasm }}
        crun version: {{ k8s_crun_version }}
        crun with wasm: {{ k8s_crun_with_wasm }}
        {{ "runc download url " + k8s_runc_download_url if(k8s_containerd_variant == "github") else "runc version: latest" }}
      {% if(k8s_containerd_variant == "github") %}
        containerd download url {{ k8s_containerd_download_url }}
        cni plugin download url {{ k8s_cni_plugin_download_url }}
      {% endif %}
  run_once: true
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Include container runtime install
  when: task.run
  ansible.builtin.include_tasks:
    file: "{{ task.file }}"
    apply:
      tags: [k8s, k8s-prepare, k8s-base, k8s-runtime]
  with_items:
    - {
        file: "{{ k8s_crun_install_task }}",
        run: "{{ k8s_install_crun or k8s_cri == 'crun' }}",
      }
    - {
        file: "youki.yml",
        run: "{{ k8s_install_youki or k8s_cri == 'youki' }}",
      }
    - { file: "wasi.yml", run: "{{ k8s_install_wasi }}" }
    - { file: "spin.yml", run: "{{ k8s_install_spin }}" }
    - { file: "stargz.yml", run: "{{ k8s_install_stargz }}" }
    # - { file: "kata_containers.yml", run: "{{ k8s_install_kata_containers }}" }
  loop_control:
    loop_var: task
    label: "{{ task.file }}"
  vars:
    k8s_crun_install_task: "crun{{ '_wasm' if(k8s_crun_with_wasm) }}.yml"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime]

- name: k8s common | Add Docker/K8s/gVisor repository
  ansible.builtin.deb822_repository:
    name: "{{ item.name }}"
    types: [deb]
    uris: "{{ item.repo }}"
    signed_by: "{{ item.key }}"
    components: "{{ item.components | default(omit) }}"
    suites: "{{ item.suites | default(['/']) }}"
    state: present
    enabled: "{{ item.state | default(True) }}"
  with_items:
    - name: kubernetes
      repo: "https://pkgs.k8s.io/core:/stable:/v{{ (k8s_version | split('.'))[0:2] | join('.') }}/deb/"
      key: "https://pkgs.k8s.io/core:/stable:/v{{ (k8s_version | split('.'))[0:2] | join('.') }}/deb/Release.key"
    - name: gvisor
      repo: https://storage.googleapis.com/gvisor/releases
      key: "https://gvisor.dev/archive.key"
      components: [main]
      suites: [release]
      state: "{{ k8s_install_gvisor }}"
    - name: docker
      repo: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
      key: "https://download.docker.com/linux/{{ ansible_facts.distribution | lower }}/gpg"
      components: [stable]
      suites: ["{{ ansible_distribution_release | lower }}"]
      state: "{{ k8s_containerd_variant | lower == 'docker' and k8s_cri_runtime == 'containerd' }}"
    - name: crio
      repo: "https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ (__k8s_crio_version | split('.'))[0:2] | join('.') }}/deb/"
      key: "https://download.opensuse.org/repositories/isv:/cri-o:/stable:/{{ (__k8s_crio_version | split('.'))[0:2] | join('.') }}/deb/Release.key"
      state: "{{ k8s_cri_runtime == 'crio' }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    __k8s_crio_version: "{{ k8s_crio_version if k8s_crio_version != 'latest' else __k8s_crio_gh_version }}"
    __k8s_crio_gh_version: "{{ (lookup('url', 'https://api.github.com/repos/cri-o/cri-o/releases/latest') | from_json).tag_name }}"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime, apt]

- name: k8s common | Install kubelet and admin tools
  ansible.builtin.apt:
    name: >-
      {{ __k8s_kube_packages + __k8s_gvisor_packages
      if(k8s_install_gvisor)
      else __k8s_kube_packages
      }}
    state: present
    update_cache: true
    install_recommends: false
    allow_downgrade: true
    autoremove: true
    allow_change_held_packages: true
  vars:
    __k8s_gvisor_packages:
      - 'runsc{{ "=" + k8s_gvisor_version + "*" if (k8s_gvisor_version != "latest") }}'
    __k8s_kube_packages:
      - 'kubeadm{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      - 'kubelet{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      # - 'kubectl{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      # - "cri-tools"
      # - "etcd-client"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime, apt]

- name: k8s common | Include install CRI
  ansible.builtin.include_tasks:
    file: "{{ __k8s_containerd_task_file if k8s_cri_runtime == 'containerd' else 'crio.yml' }}"
    apply:
      tags: [k8s, k8s-prepare, k8s-base, k8s-runtime, apt]
  vars:
    __k8s_containerd_task_file: "containerd_{{ k8s_containerd_variant | lower }}.yml"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime, apt]

- name: k8s common | Include install kubelet-credential-providers
  ansible.builtin.include_tasks:
    file: kubelet-credential-provider-{{ item }}.yml
    apply:
      tags: [k8s, k8s-prepare, k8s-base, k8s-plugins]
  tags: [k8s, k8s-prepare, k8s-base, k8s-plugins]
  loop: "{{ k8s_credential_provider }}"

- name: k8s common | Set packages to fixed versions
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop: "{{ __k8s_kube_packages | flatten }}"
  vars:
    __k8s_kube_packages:
      - [kubeadm, kubelet]
      - "{{ ['runsc'] if(k8s_install_gvisor) else [] }}"
      - "{{ ['containerd.io'] if(k8s_containerd_variant | lower == 'docker') else [] }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: k8s common | Copy container runtime configs
  when: item.run | default(true)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    mode: "0600"
    owner: root
    group: root
    validate: "{{ item.validate | default(omit) }}"
  with_items:
    - src: containerd-config.toml.j2
      dst: /etc/containerd/config.toml
      run: "{{ k8s_cri_runtime == 'containerd' }}"
    - src: runsc.toml.j2
      dst: /etc/containerd/runsc.toml.j2
    - src: crictl.yml.j2
      dst: /etc/crictl.yaml
      validate: yq . %s
    - src: cilium-networkd.conf.j2
      dst: /etc/systemd/networkd.conf
      run: "{{ k8s_cni | lower == 'cilium'}}"
  register: __run_conf
  loop_control:
    label: "{{ item.src }}"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime]

- name: k8s common | Enable CRI service
  ansible.builtin.systemd:
    name: "{{ k8s_cri_runtime }}.service"
    state: started
    daemon_reload: true
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime]

- name: k8s common | Restart CRI
  ansible.builtin.service:
    name: "{{ k8s_cri_runtime }}"
    daemon_reload: true
    state: restarted
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-prepare, k8s-base, k8s-runtime]

- name: k8s common | Enable kubectl bash completion
  ansible.builtin.blockinfile:
    path: "{{ ansible_facts.env.HOME }}/.bashrc"
    block: |
      if command -v kubectl > /dev/null; then
        source <(kubectl completion bash)
        alias k=kubectl
        complete -F __start_kubectl k
      fi
  tags: [k8s, k8s-prepare, k8s-base]

- name: k8s common | Shutdown
  when: k8s_shutdown_after_common
  community.general.shutdown:
  tags: [k8s, k8s-prepare, k8s-base]
