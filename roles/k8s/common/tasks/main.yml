# Main k8s Setup
---
- name: Include common vars
  ansible.builtin.include_vars:
    file: ../../common_vars.yml
    name: common_vars
  tags: [k8s, k8s-prepare, k8s-base]

- name: Wait for cloud init to finish
  community.general.cloud_init_data_facts:
    filter: status
  register: _cloud_init_res
  until: "_cloud_init_res.cloud_init_data_facts.status.v1.stage is defined and not _cloud_init_res.cloud_init_data_facts.status.v1.stage"
  retries: 25
  delay: 10
  tags: [k8s, k8s-prepare, k8s-base]

- name: Set a hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  tags: [k8s, k8s-prepare, k8s-base]

# - name: Enable SELinux in enforcing mode
#   ansible.posix.selinux:
#     policy: '{{ k8s_selinux_policy }}'
#     state: '{{ k8s_selinux_mode }}'
#   tags: [k8s, k8s-prepare, k8s-base, selinux]

- name: Add Debian Backports apt repo
  when: ansible_facts.distribution == "Debian"
  ansible.builtin.apt_repository:
    repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release }}-backports main"
    state: present
    filename: debian-backports
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Ensure required packages are installed
  ansible.builtin.apt:
    name: [gnupg, git, lsb-release, ca-certificates, curl, apparmor, python3-kubernetes, apt-transport-https, jq, unzip, wget, socat, mtr-tiny, logrotate, open-iscsi, ipvsadm, dbus, libyajl2, policycoreutils, selinux-basics, selinux-policy-default, auditd, semodule-utils, setools, apparmor-profiles-extra, criu]
    state: present
    update_cache: true
    install_recommends: false
    cache_valid_time: 86400
    autoremove: true
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Setup UnattendedUpgrades
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/20auto-upgrades
    create: true
    state: "{{ k8s_unattended_upgrades_state }}"
    line: "{{ item }}"
    mode: "0644"
  loop:
    - APT::Periodic::Update-Package-Lists "1";
    - APT::Periodic::Unattended-Upgrade "1";
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  loop: [swap, none]
  tags: [k8s, k8s-prepare, k8s-base]

- name: Disable swap
  ansible.builtin.command: swapoff -a
  register: __k8s_swap_disable_tmp
  changed_when: __k8s_swap_disable_tmp.stdout != ""
  tags: [k8s, k8s-prepare, k8s-base]

- name: Add entries to /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item.ip }} {{ item.name }}"
    create: true
    state: '{{ item.state | default("present")}}'
  loop: "{{ k8s_etc_hosts }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Create config dirs
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: '{{ item.mode | default("0644") }}'
    state: directory
  with_items:
    - { path: "/srv" }
    - { path: "/etc/apt/keyrings" }
    - { path: "/etc/containerd" }
    - { path: "{{ ansible_facts.env.HOME }}/.kube" }
    - { path: "/etc/systemd/system/docker.service.d" }
    - { path: "/etc/kubernetes/enc", mode: "0775" }
    - { path: "/etc/systemd/system/kubelet.service.d", mode: "0600" }
    - { path: "/opt/cni/bin", mode: "0755" }
    - { path: "/var/lib/kubelet" }
    - { path: "/usr/wasmedge/lib" }
  tags: [k8s, k8s-prepare, k8s-base]

- name: Ensure br_netfilter and overlay is enabled
  community.general.modprobe:
    name: "{{ item }}"
    state: present
    persistent: present
  loop: [br_netfilter, overlay]
  tags: [k8s, k8s-prepare, k8s-base]

- name: Set sysctl parameters
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.val }}"
    state: '{{ item.state | default("present") }}'
    sysctl_set: true
    reload: true
  with_items: "{{ k8s_common_sysctl_conf }}"
  loop_control:
    label: "{{ item.key }}={{ item.val }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Setting system limits
  pam_limits:
    domain: "{{ item.user }}"
    limit_type: '{{ item.type | default("-") }}'
    limit_item: "{{ item.limit }}"
    value: "{{ item.value }}"
    comment: "{{ item.comment | default(omit) }}"
  loop: "{{ k8s_system_limits }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Print used version info
  ansible.builtin.debug:
    msg: |
      Installing:
        k8s version: {{ k8s_version if (k8s_version != "latest") else "latest" }}
        containerd version: {{ k8s_containerd_version }}
        container runtime: {{ k8s_cri }}
        crun version: {{ k8s_crun_version }}
        crun with wasm: {{ k8s_crun_with_wasm }}
        {{ "runc download url " + k8s_runc_download_url if(k8s_containerd_variant == "github") else "runc version: latest" }}
      {% if(k8s_containerd_variant == "github") %}
        containerd download url {{ k8s_containerd_download_url }}
        cni plugin download url {{ k8s_cni_plugin_download_url }}
      {% endif %}
  run_once: true
  tags: [k8s, k8s-prepare, k8s-base]

- name: Include install crun
  ansible.builtin.include_tasks: 'crun{{ "_wasm" if(k8s_crun_with_wasm) }}.yml'
  tags: [k8s, k8s-prepare, k8s-base]

- name: Adding apt GPG Keys
  ansible.builtin.apt_key:
    url: "{{ item }}"
    state: present
  retries: 3
  loop:
    - "https://download.docker.com/linux/{{ ansible_facts.distribution | lower }}/gpg"
    - 'https://pkgs.k8s.io/core:/stable:/v{{ (k8s_version | split("."))[0:2] | join(".") }}/deb/Release.key'
    - "https://dl.k8s.io/apt/doc/apt-key.gpg"
    - "https://gvisor.dev/archive.key"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Add Docker/K8s/gVisor repository
  ansible.builtin.apt_repository:
    repo: "{{ item.repo }}"
    update_cache: true
    state: '{{ item.state | default("present") }}'
    filename: "{{ item.name }}"
  with_items:
    - name: k8s
      repo: 'deb https://pkgs.k8s.io/core:/stable:/v{{ (k8s_version | split("."))[0:2] | join(".") }}/deb/ /'
    - name: docker
      repo: "deb https://download.docker.com/linux/{{ ansible_facts.distribution | lower }} {{ ansible_facts.lsb.codename }} stable"
      state: '{{ "present" if(k8s_containerd_variant | lower == "docker") else "absent" }}'
    - name: gvisor
      repo: deb https://storage.googleapis.com/gvisor/releases release main
      state: '{{ "present" if(k8s_install_gvisor) else "absent" }}'
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

  # - name: Add Kubernetes APT repository
  #   ansible.builtin.deb822_repository:
  #     name: kubernetes
  #     types: [deb]
  #     uris: "https://pkgs.k8s.io/core:/stable:/v1.29/deb/"
  #     signed_by: "https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key"
  #     suites: [/]
  #     state: present
  #     enabled: yes

- name: Install kubelet and admin tools
  ansible.builtin.apt:
    name:
      - 'kubeadm{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      - 'kubectl{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      - 'kubelet{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      - '{{ "runsc" if(k8s_install_gvisor) }}'
      - "etcd-client"
    state: present
    update_cache: true
    cache_valid_time: 86400 # equal to 24h
    install_recommends: false
    allow_downgrade: true
    autoremove: true
    allow_change_held_packages: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Include install containerd
  ansible.builtin.include_tasks:
    file: "containerd_{{ k8s_containerd_variant | lower }}.yml"
    apply:
      tags: [k8s, k8s-prepare, k8s-base, apt]
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Set packages to fixed versions
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop: '{{ __default_k8s_packages + ["containerd.io"] if(k8s_containerd_variant | lower == "docker") else __default_k8s_packages }}'
  vars:
    __default_k8s_packages: [kubeadm, kubectl, kubelet]
  tags: [k8s, k8s-prepare, k8s-base, apt]

- name: Create conf dirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "/etc/containerd"
    - "/etc/systemd/system/docker.service.d"
    - "/etc/systemd/system/kubelet.service.d"
    - "/usr/wasmedge/lib"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Copy kubelet/docker/containerd/crun/runsc-conf
  ansible.builtin.template:
    src: "{{ item.src }}.j2"
    dest: "{{ item.dst }}"
    mode: "0600"
    owner: root
    group: root
  with_items:
    - {
        src: 00-docker-cgroup.conf,
        dst: /etc/systemd/system/docker.service.d/00-docker-cgroup.conf,
      }
    - { src: containerd-config.toml, dst: /etc/containerd/config.toml }
    - { src: runsc.toml, dst: /etc/containerd/runsc.toml }
    - { src: crictl.yaml, dst: /etc/crictl.yaml }
  register: __run_conf
  tags: [k8s, k8s-prepare, k8s-base]

- name: Enable containerd service
  ansible.builtin.systemd:
    name: containerd.service
    state: started
    daemon_reload: true
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Restart containerd
  when: __run_conf.changed
  ansible.builtin.service:
    name: containerd
    daemon_reload: true
    state: restarted
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-prepare, k8s-base]

- name: Enable kubectl bash completion
  ansible.builtin.blockinfile:
    path: "{{ ansible_facts.env.HOME }}/.bashrc"
    block: |
      source <(kubectl completion bash)
      source <(crictl completion)
  tags: [k8s, k8s-prepare, k8s-base]

- name: Pre-pull images
  when: k8s_prepull_images
  ansible.builtin.command: |
    kubeadm config images pull \
      {{ "--kubernetes-version " + k8s_version if (k8s_version != "latest") }} \
      {{ "--image-repository " + k8s_image_repo if (k8s_image_repo | default("") != "") }}
  register: __k8s_pull_res
  changed_when: ((__k8s_pull_res.end[:-7] | to_datetime) - (__k8s_pull_res.start[:-7] | to_datetime)).total_seconds() > 5
  tags: [k8s, k8s-prepare, k8s-base]

- name: Copy systemd sys-fs-bpf for cilium cni
  when: k8s_cni | lower == 'cilium'
  # See https://docs.cilium.io/en/v1.13/operations/system_requirements/#systemd-based-distributions
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    mode: "0600"
    owner: root
    group: root
  with_items:
    - { src: cilium-networkd.conf, dst: /etc/systemd/networkd.conf }
  tags: [k8s, k8s-prepare, k8s-base, k8s-init, k8s-cni, k8s-cilium]
