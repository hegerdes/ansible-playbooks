---
k8s_version: 1.31.1
k8s_snapshot_mode_disabled: true

# Which cri to use: runc, crun, youki or runsc, kata-containers
k8s_cri: crun
k8s_install_gvisor: true
k8s_install_wasi: true
k8s_install_youki: true
k8s_install_crun: true
k8s_install_kata_containers: false

# List of key value pairs passed to kubelet
k8s_kubelet_extra_args: []
# # Example
# k8s_kubelet_extra_args:
#   - name: arg1
#     value: val1

k8s_youki_with_wasm: false
k8s_crun_with_wasm: false
k8s_crun_wasmlib_version: 0.1.0

k8s_prepull_images: true
k8s_inventory_as_hostname: true
k8s_unattended_upgrades_state: present
k8s_containerd_variant: github # can be docker (uses docker apt repo) or github (official github upstream release)
k8s_containerd_version: latest # can be set for docker an github version of containerd
k8s_cni_plugins_version: latest # only applies if k8s_containerd_variant is equal to github
k8s_runc_version: latest # only applies if k8s_containerd_variant is equal to github
k8s_crun_version: latest
k8s_youki_version: latest
k8s_gvisor_version: latest
k8s_selinux_mode: permissive # can be: disabled,enforcing,permissive
k8s_selinux_policy: targeted
k8s_cni: calico

k8s_etc_hosts: []
# Example
# k8s_etc_hosts:
#   - name: k8s-hetzner-cp
#     ip: 127.0.0.1
#     state: present|absent       # optional

# Secure defaults on
# https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Recommended_Settings
# https://cos.googlesource.com/cos/overlays/board-overlays/+/refs/heads/master/project-lakitu/chromeos-base/chromeos-base/files/00-sysctl.conf
k8s_common_sysctl_conf:
  # Allow fast tcp open option
  - { key: net.ipv4.tcp_fastopen, val: 1 }
  # Forward package to real dest
  - { key: net.ipv4.ip_forward, val: 1 }
  # Ignore ICMP broadcasts
  - { key: net.ipv4.icmp_echo_ignore_broadcasts, val: 1 }
  # Wider range of short lived ports. Default of 32768 60999
  - { key: net.ipv4.ip_local_port_range, val: 10240 65535 }
  # Source route verification. Default of 0 - off
  - { key: net.ipv4.conf.all.rp_filter, val: 0 }
  # Forward packages between nics
  - { key: net.ipv4.conf.all.forwarding, val: 1 }
  - { key: net.ipv6.conf.all.forwarding, val: 1 }
  - { key: net.ipv4.conf.default.forwarding, val: 1 }
  - { key: net.ipv6.conf.default.forwarding, val: 1 }
  - { key: net.bridge.bridge-nf-call-iptables, val: 1 }
  - { key: net.bridge.bridge-nf-call-ip6tables, val: 1 }
  # Max queued connections for socket. Default of 4096
  - { key: net.core.somaxconn, val: 4096 }
  # Max remembered connection requests, awaiting an acknowledgment. Default of 128
  - { key: net.ipv4.tcp_max_syn_backlog, val: 1024 }
  # Application layer will handle memory kills
  - { key: vm.overcommit_memory, val: 1 }
  # Likeliness of moving to swap. Containers run better without swap. Default of 60
  - { key: vm.swappiness, val: 0 }
  # Don't panic on oom
  - { key: vm.panic_on_oom, val: 0 }
  # Panic on oops
  - { key: kernel.panic_on_oops, val: 1 }
  # Set pid_max to maximum allowable limit (2^22).
  - { key: kernel.pid_max, val: 4194304 }
  # If panic reboot after 10s. Default of 0 - no reboot
  - { key: kernel.panic, val: 10 }
  # Enable all available Address Space Randomization (ASLR) for userspace processes.
  - { key: kernel.randomize_va_space, val: 2 }
  # Avoid kernel memory address exposures via dmesg kernel logs to root only.
  - { key: kernel.dmesg_restrict, val: 1 }
  # Keep kernel address exposures out of various /proc files.
  - { key: kernel.kptr_restrict, val: 1 }
  # Allow more (default is 8192) inotify watch for large workloads.
  - { key: fs.inotify.max_user_watches, val: 524288 }
  # Allow more (default is 128) inotify instances for large workloads.
  - { key: fs.inotify.max_user_instances, val: 4096 }
  # Enable crash reporting for setuid programs too.
  - { key: fs.suid_dumpable, val: 2 }
  # Disable POSIX symlink and hardlink corner cases that lead to lots of filesystem confusion
  - { key: fs.protected_symlinks, val: 1 }
  - { key: fs.protected_hardlinks, val: 1 }
  # Enable SYN cookies (yum!)
  # http://cr.yp.to/syncookies.html
  - { key: net.ipv4.tcp_syncookies, val: 1 }

  # # Ignore bad ICMP errors
  - { key: net.ipv4.icmp_ignore_bogus_error_responses, val: 1 }
  # Implement RFC 1337 fix
  - { key: net.ipv4.tcp_rfc1337, val: 1 }

  # # Enables source route verification - breaks eBPF
  # - { key: net.ipv4.conf.default.rp_filter, val: 1 }
  # # Enable reverse path - breaks eBPF
  # - { key: net.ipv4.conf.all.rp_filter, val: 1 }

  #   # Disable ICMP Redirect Acceptance
  # - { key: net.ipv4.conf.all.accept_redirects, val: 0 }
  # - { key: net.ipv6.conf.all.accept_redirects, val: 0 }
  # - { key: net.ipv4.conf.default.accept_redirects, val: 0 }
  # - { key: net.ipv6.conf.default.accept_redirects, val: 0 }

k8s_system_limits:
  - user: "root"
    limit: "nofile"
    value: 8192
    comment: ""
# Example
# k8s_system_limits:
#   - user: "*"
#     type: "hard"    # optional
#     limit: "nofile"
#     value: 1048576
#     comment: ""
#   - user: "docker"
#     type: "-"       # hard & soft
#     limit: "core"
#     value: 1048576
#     comment: ""     # optional

# Set and get versions and urls
k8s_containerd_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/containerd/containerd/releases/latest")
  | from_json
  | json_query(k8s_containerd_query)
  | first
  if(k8s_containerd_version == "latest")
  else "https://github.com/containerd/containerd/releases/download/v"
  + k8s_containerd_version + "/containerd-" + k8s_containerd_version
  + "-" + ansible_facts.system | lower + "-"
  + system_arch_map[ansible_facts.architecture] + ".tar.gz"
  }}
k8s_cni_plugin_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/containernetworking/plugins/releases/latest")
  | from_json
  | json_query(k8s_cni_plugins_query)
  | first
  if(k8s_cni_plugins_version == "latest")
  else "https://github.com/containernetworking/plugins/releases/download/v"
  + k8s_cni_plugins_version + "/cni-plugins-" + ansible_facts.system
  | lower + "-" + system_arch_map[ansible_facts.architecture]
  + "-v" + k8s_cni_plugins_version + ".tgz"
  }}
k8s_runc_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/opencontainers/runc/releases/latest")
  | from_json
  | json_query(k8s_runc_query)
  | first
  if(k8s_runc_version == "latest")
  else
  "https://github.com/opencontainers/runc/releases/download/v"
  + k8s_runc_version + "/runc."
  + system_arch_map[ansible_facts.architecture]
  }}
k8s_crun_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/containers/crun/releases/latest")
  | from_json
  | json_query(k8s_crun_query)
  | first
  if(k8s_crun_version == "latest")
  else
  "https://github.com/containers/crun/releases/download/"
  + k8s_crun_version + "/crun-" + k8s_crun_version
  + "-linux-" + system_arch_map[ansible_facts.architecture]
  }}
k8s_crun_wasm_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/hegerdes/helper-suite/releases/latest")
  | from_json
  | json_query(k8s_crun_wasm_query)
  | select("search", ansible_facts.architecture)
  | list
  | first
  }}
k8s_youki_wasm_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/hegerdes/helper-suite/releases/latest")
  | from_json
  | json_query(k8s_youki_wasm_query)
  | select('search', 'youki')
  | list
  | first
  }}
k8s_youki_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/containers/youki/releases/latest")
  | from_json
  | json_query(k8s_youki_query)
  | first
  if(k8s_youki_version == "latest")
  else
  "https://github.com/containers/youki/releases/download/v"
  + k8s_youki_version + "/youki-" + k8s_youki_version
  + "-" + ansible_facts.architecture + "-gnu.tar.gz"
  }}
k8s_kata_containers_download_url: >-
  {{
  lookup("url", "https://api.github.com/repos/kata-containers/kata-containers/releases/latest")
  | from_json
  | json_query(k8s_kata_containers_query)
  | select("search", system_arch_map[ansible_facts.architecture])
  | list
  | first
  }}

k8s_crun_wasm_query: "assets[?starts_with(name, 'crun')].browser_download_url"
k8s_kata_containers_query: assets[?starts_with(name, "kata-static")].browser_download_url
k8s_runc_query: >-
  {{
  "assets[?ends_with(name,'"
  + system_arch_map[ansible_facts.architecture]
  + "' )].browser_download_url"
  }}
k8s_containerd_query: >-
  {{
  "assets[?ends_with(name, '" + ansible_facts.system
  | lower
  + "-"
  + system_arch_map[ansible_facts.architecture]
  + ".tar.gz' )].browser_download_url"
  }}
k8s_cni_plugins_query: >-
  {{
  "assets[?starts_with(name, 'cni-plugins-"
  + ansible_facts.system
  | lower
  + "-"
  + system_arch_map[ansible_facts.architecture]
  +"' )].browser_download_url"
  }}
k8s_crun_query: >-
  {{
  "assets[?contains(name, 'linux-"
  + system_arch_map[ansible_facts.architecture]
  + "')].browser_download_url"
  }}

k8s_youki_wasm_query: "assets[?contains(name, '{{ system_arch_map[ansible_facts.architecture] }}.tar.gz' )].browser_download_url"
k8s_youki_query: "assets[?contains(name, '{{ ansible_facts.architecture }}-gnu.tar.gz' )].browser_download_url"
k8s_wasmi_version: "{{ lookup('url', 'https://api.github.com/repos/containerd/runwasi/releases?per_page=4') | from_json | json_query('[*].tag_name') }}"

system_arch_map:
  x86_64: amd64
  aarch64: arm64
