---
# Main k8s Setup
- name: k8s cp | Test reachability to KubeControlPlane
  when: k8s_cp_ping_check | default(true)
  ansible.builtin.command: "ping -c 1 {{ k8s_shared_api_server_endpoint }}"
  changed_when: false
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Install Helm
  when: k8s_kubeconfig == '/etc/kubernetes/admin.conf'
  ansible.builtin.include_role:
    name: k8s/helm
    public: true
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-helm]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-helm]

- name: k8s cp | Install kubectl & python k8s tools
  ansible.builtin.apt:
    name:
      - 'kubectl{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}'
      - python3-kubernetes
    update_cache: true
    install_recommends: false
    allow_downgrade: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Copy kubelet, kubeadm, audit, etcd encryption conf and patches
  ansible.builtin.copy:
    content: "{{ item.content | default(omit) }}"
    src: "{{ item.src | default(omit) }}"
    dest: "{{ item.dst }}"
    mode: "{{ item.mode | default('0600') }}"
    validate: "{{ item.validate | default(omit) }}"
  loop: "{{ __k8s_cp_conf_defaults + k8s_controlplane_extra_files }}"
  vars:
    __k8s_cp_conf_defaults:
      - name: etcd-encryption-conf
        dst: /etc/kubernetes/extras/encryption-config.yaml
        content: "{{ k8s_etcd_encryption_conf }}"
        validate: yq . %s
      - name: audit-conf
        dst: /etc/kubernetes/extras/audit-policy.yaml
        src: audit-policy.yaml
        validate: yq . %s
      - name: authorization-conf
        dst: /etc/kubernetes/extras/authorization-conf.yaml
        content: "{{ k8s_controlplane_auth_z_conf }}"
        validate: yq . %s
      - name: authentication-conf
        dst: /etc/kubernetes/extras/authentication-conf.yaml
        content: "{{ k8s_controlplane_auth_n_conf }}"
        validate: yq . %s
      - name: admission-conf
        dst: /etc/kubernetes/extras/admission-control-config.yaml
        content: "{{ k8s_admission_config }}"
        validate: yq . %s
      - name: kubeadm-conf
        dst: "{{ target_data_dir | default('') }}/srv/kubeadm-config.yaml"
        content: "{{ k8s_kubeadm_conf }}"
        validate: kubeadm config validate --config %s
      - name: patches
        dst: "{{ target_data_dir | default('') }}/srv"
        src: patches
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-init, k8s-cp-init, k8s-copy]

- name: k8s common | Pre-pull images
  ansible.builtin.command: |
    kubeadm config images pull \
      {{ "--kubernetes-version " + k8s_version if (k8s_version != "latest") }} \
      {{ "--image-repository " + k8s_image_repo if (k8s_image_repo | default("") != "") }}
  args:
    creates: /etc/kubernetes/kubelet.conf
  register: __k8s_pull_res
  changed_when: false
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp - kubeadm | Init first control-plane node
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  block:
    - name: k8s cp - kubeadm | Init Kubernetes cluster
      ansible.builtin.command: |
        kubeadm init \
          --config {{ target_data_dir | default("") }}/srv/kubeadm-config.yaml \
          --upload-certs
      args:
        creates: /etc/kubernetes/kubelet.conf
      register: __k8s_init_cluster
      timeout: 300
      tags: [k8s, k8s-init, k8s-cp-init]
  rescue:
    - name: k8s cp - kubeadm | Cleanup - Reset Kubernetes component
      ansible.builtin.command: "kubeadm reset --force"
      changed_when: true
      register: reset_cluster
      tags: [k8s, k8s-init, k8s-cp-init]
  always:
    - name: k8s cp - kubeadm | Debug - Kubeadm init res
      when: k8s_init_verbose
      ansible.builtin.debug:
        var: __k8s_init_cluster
      tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Deploying initial resource manifests
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  run_once: "{{ k8s_init_resources.run_once | default(true) }}"
  kubernetes.core.k8s:
    namespace: "{{ k8s_init_resources.namespace | default(omit) }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
    state: "{{ k8s_init_resources.state | default('present') }}"
    definition: "{{ k8s_init_resources.definition }}"
    wait: "{{ k8s_init_resources.wait | default(true) }}"
  loop: "{{ k8s_default_manifests + k8s_init_resources_manifests | flatten }}"
  loop_control:
    loop_var: k8s_init_resources
    label: "{{ k8s_init_resources.name }}"
  tags: [k8s, k8s-init, k8s-cp-init, k8s-cp-init-manifests]

- name: k8s cp | Deploying initial Helm-Charts
  run_once: true
  ansible.builtin.include_role:
    name: k8s/deploy
    tasks_from: helm-deploy
    public: true
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-cp-init-manifests, k8s-helm]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-cp-init-manifests, k8s-helm]
  loop: "{{ k8s_init_helm_apps }}"
  loop_control:
    label: "{{ item.chart_name }}"
  vars:
    k8s_helm_app: "{{ item }}"

- name: k8s cp | Check if kubeadm has already run
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: k8s_kubeadm_all_init
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Upload certificates
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  ansible.builtin.command: |
    kubeadm init phase upload-certs --upload-certs \
      --config {{ target_data_dir | default("") }}/srv/kubeadm-config.yaml
  register: __k8s_kubeadm_cert_key_res
  changed_when: false
  run_once: true
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Get join token
  when: groups.k8s_control_plane | length > 1 and not k8s_kubeadm_all_init.stat.exists
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  ansible.builtin.command: |
    kubeadm token create \
    --ttl 15m \
    --description "{{ ansible_date_time.date }} Token used to join node {{ ansible_hostname }}" \
    --kubeconfig {{ k8s_kubeconfig | default("/etc/kubernetes/admin.conf") }}
  register: __k8_cp_join_token_res
  changed_when: false
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Get CA certificate hash
  when: groups.k8s_control_plane | length > 1
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  community.crypto.x509_certificate_info:
    path: "{{ k8s_pki_cert_path }}/ca.crt"
  register: __k8s_pki_ca
  changed_when: false
  run_once: true
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | kubeadm-join config
  when: groups.k8s_control_plane | length > 1 and not k8s_kubeadm_all_init.stat.exists
  ansible.builtin.copy:
    content: "{{ k8s_kubeadm_join_conf }}"
    dest: "{{ target_data_dir | default('') }}/srv/kubeadm-join-config.yml"
    mode: "0600"
    validate: kubeadm config validate --config %s
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Join control-plane nodes
  when: not k8s_kubeadm_all_init.stat.exists
  ansible.builtin.command: |
    kubeadm join -v 5 --config {{ target_data_dir | default("") }}/srv/kubeadm-join-config.yml
  register: __k8s_join_res
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Change kubelet conf permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: "0600"
  loop: [/var/lib/kubelet/config.yaml, /lib/systemd/system/kubelet.service]
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Enable and check kubelet service
  ansible.builtin.systemd:
    name: kubelet
    daemon_reload: true
    state: started
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Show join results
  when: k8s_init_verbose
  ansible.builtin.debug:
    var: __k8s_join_res
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Remove NoSchedule taint form control-plane nodes
  when: k8s_remove_no_schedule_cp_taints
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  kubernetes.core.k8s_taint:
    kubeconfig: "{{ k8s_kubeconfig }}"
    state: absent
    name: "{{ ansible_facts.hostname }}"
    taints:
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: dedicated
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: Get info on nodes
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: "{{ inventory_hostname }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
  register: __k8s_cp_node
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: k8s cp | Patch Controlplane
  run_once: "{{ item.run_once | default(false) }}"
  when: item.when | default(true)
  kubernetes.core.k8s_json_patch:
    api_version: "{{ item.api_version }}"
    kind: "{{ item.kind }}"
    namespace: "{{ item.namespace | default(omit) }}"
    name: "{{ item.resource_name }}"
    patch: "{{ item.patches }}"
    kubeconfig: "{{ k8s_kubeconfig }}"
  loop: "{{ k8s_cp_patches }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    k8s_cp_patches: "{{ k8s_patches }}"
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: k8s cp | Get csr resources
  run_once: true
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k8s_kubeconfig }}"
    api_version: certificates.k8s.io/v1
    kind: certificatesigningrequests
  register: __k8s_kubelet_csr_list_res
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Approve kubelet csr
  ansible.builtin.command: "kubectl certificate approve {{ __k8s_kubelet_csr }}"
  when: __k8s_kubelet_csr_list_res.resources | json_query(__k8s_kubelet_csr_query) | length > 0
  register: __k8s_worker_role_set
  changed_when: >-
    ("certificatesigningrequest.certificates.k8s.io/" + __k8s_kubelet_csr + " approved")
    in __k8s_worker_role_set.stdout
  environment:
    KUBECONFIG: "{{ k8s_kubeconfig }}"
  vars:
    __k8s_kubelet_csr_query: "[?spec.username == 'system:node:{{ inventory_hostname }}' && status == `{}`]"
    __k8s_kubelet_csr: >-
      {{ (__k8s_kubelet_csr_list_res.resources
      | json_query(__k8s_kubelet_csr_query)
      | first).metadata.name
      }}
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Setup configs
  ansible.builtin.include_tasks:
    file: setup-configs.yml
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Setup k9s
  when: k8s_install_k9s
  ansible.builtin.include_tasks:
    file: setup-k9s.yml
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-k9s]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-k9s]

- name: k8s cp | Setup CNI
  ansible.builtin.include_tasks:
    file: "setup-cni-{{ k8s_cni | lower }}.yml"
  run_once: true
  tags:
    [
      k8s,
      k8s-init,
      k8s-cp-init,
      k8s-cni,
      k8s-flannel,
      k8s-calico,
      k8s-cilium,
      k8s-aws-vpc,
    ]
