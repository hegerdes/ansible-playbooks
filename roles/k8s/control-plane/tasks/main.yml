---
# Main k8s Setup
- name: k8s cp | Test reachability to KubeControlPlane
  when: k8s_cp_ping_check | default(true)
  ansible.builtin.command: "ping -c 2 {{ k8s_shared_api_server_endpoint }}"
  changed_when: false
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Assert that k8s_etcd_encryption_secret has the right length
  ansible.builtin.assert:
    that: [k8s_etcd_encryption_secret | length == 32]
    fail_msg: "'k8s_etcd_encryption_secret' must be 32 characters long"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Install kubectl & python k8s tools
  ansible.builtin.apt:
    name:
      [
        'kubectl{{ "=" + k8s_version + "*" if (k8s_version != "latest") }}',
        python3-kubernetes,
      ]
    update_cache: true
    install_recommends: false
    allow_downgrade: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Copy kubelet, kubeadm, etcd encryption and patches
  ansible.builtin.copy:
    content: "{{ item.content | default(omit) }}"
    dest: "{{ item.dst }}"
    src: "{{ item.src | default(omit) }}"
    mode: "0600"
    validate: "{{ item.validate | default(omit) }}"
  with_items: "{{ __k8s_cp_conf_defaults + k8s_controlplane_extra_files }}"
  vars:
    __k8s_cp_conf_defaults:
      - name: etcd-encryption-conf
        dst: /etc/kubernetes/extras/encryption-config.yaml
        content: "{{ k8s_etcd_encryption_conf }}"
        validate: yq . %s
      - name: kubeadm-conf
        dst: "{{ target_data_dir | default('') }}/srv/kubeadm-config.yaml"
        content: "{{ k8s_kubeadm_conf }}"
        validate: kubeadm config validate --config %s
      - name: patches
        dst: "{{ target_data_dir | default('') }}/srv"
        src: patches
      # - name: kubelet-override-conf
      #   dst: /etc/kubernetes/kubelet.conf.d/10-kubelet-ip.conf
      #   content: "{{ k8s_kubelet_override_conf }}"
      #   validate: yq . %s
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Check if kubeadm has already run
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: __k8s_kubeadm_conf
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s common | Pre-pull images
  when: not __k8s_kubeadm_conf.stat.exists
  ansible.builtin.command: |
    kubeadm config images pull \
      {{ "--kubernetes-version " + k8s_version if (k8s_version != "latest") }} \
      {{ "--image-repository " + k8s_image_repo if (k8s_image_repo | default("") != "") }}
  register: __k8s_pull_res
  changed_when: >-
    ((__k8s_pull_res.end[:-7]
    | to_datetime) - (__k8s_pull_res.start[:-7]
    | to_datetime)).total_seconds() > 5
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Init cluster if needed
  when: groups.k8s_control_plane | flatten | first == inventory_hostname and not __k8s_kubeadm_conf.stat.exists
  ansible.builtin.include_tasks: kubeadm-init.yml
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Deploying initial resource manifests
  when: groups.k8s_control_plane | flatten | first == inventory_hostname
  run_once: true
  kubernetes.core.k8s:
    namespace: "{{ k8s_init_resources.namespace | default(omit) }}"
    kubeconfig: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
    state: "{{ k8s_init_resources.state | default('present') }}"
    definition: "{{ k8s_init_resources.definition }}"
    wait: "{{ k8s_init_resources.wait | default(true) }}"
  loop: "{{ k8s_init_resources_manifests_all | flatten }}"
  loop_control:
    loop_var: k8s_init_resources
    label: "{{ k8s_init_resources.name }}"
  vars:
    k8s_init_resources_manifests_all:
      - "{{ k8s_init_resources_manifests }}"
      - "{{ [k8s_runc_manifest] }}"
      - "{{ [k8s_crun_manifest] }}"
      - "{{ [k8s_youki_manifest] if(k8s_install_youki | default(True)) else [] }}"
      - "{{ [k8s_wasmedge_manifest] if(k8s_install_wasi | default(True)) else [] }}"
      - "{{ [k8s_gVisor_manifest] if(k8s_install_gvisor | default(True)) else [] }}"
      - "{{ [k8s_spin_manifest] if(k8s_install_spin | default(True)) else [] }}"
      - "{{ [k8s_kata_manifest] if(k8s_install_kata_containers | default(False)) else [] }}"
  tags: [k8s, k8s-init, k8s-cp-init, k8s-cp-init-manifests]

- name: k8s cp | Upload certificates
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  ansible.builtin.command: |
    kubeadm init phase upload-certs --upload-certs \
      --config {{ target_data_dir | default("") }}/srv/kubeadm-config.yaml
  register: __k8s_kubeadm_cert_key_res
  changed_when: false
  run_once: true
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Get join token
  when: groups.k8s_control_plane | length > 1
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  ansible.builtin.command: |
    kubeadm token create \
    --ttl 15m \
    --description "{{ ansible_date_time.date }} Token used to join node {{ ansible_hostname }}" \
    --kubeconfig {{ k8s_kubeconfig | default("/etc/kubernetes/admin.conf") }}
  register: __k8_cp_join_token_res
  changed_when: false
  run_once: true
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Get CA certificate hash
  when: groups.k8s_control_plane | length > 1
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  community.crypto.x509_certificate_info:
    path: "{{ k8s_pki_cert_path }}/ca.crt"
  register: __k8s_pki_ca
  changed_when: false
  run_once: true
  no_log: true
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Check if kubeadm has already run
  ansible.builtin.stat:
    path: /etc/kubernetes/kubelet.conf
  register: k8s_kubeadm_all_init
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | kubeadm-join config
  when: not k8s_kubeadm_all_init.stat.exists
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ item.dst }}"
    mode: "0600"
    validate: yq . %s
  with_items:
    - name: k8s cp | kubeadm-join-conf
      dst: "{{ target_data_dir | default('') }}/srv/kubeadm-join-config.yml"
      content: "{{ k8s_kubeadm_join_conf }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Join control-plane nodes
  when: not k8s_kubeadm_all_init.stat.exists
  ansible.builtin.command: |
    kubeadm join -v 5 --config {{ target_data_dir | default("") }}/srv/kubeadm-join-config.yml
  register: __k8s_join_res
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Change kubelet conf permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: root
    group: root
    mode: "0600"
  loop: [/var/lib/kubelet/config.yaml, /lib/systemd/system/kubelet.service]
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Enable and check kubelet service
  ansible.builtin.systemd:
    name: kubelet
    daemon_reload: true
    state: started
    enabled: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags: [k8s, k8s-init, k8s-cp-init]

- name: k8s cp | Show join results
  when: k8s_init_verbose
  ansible.builtin.debug:
    var: __k8s_join_res
  tags: [k8s, k8s-init, k8s-cp-init]

# - name: Init worker join
#   include_role:
#     name: k8s/worker-join
#     apply:
#       delegate_to: "{{ item }}"
#   run_once: true
#   loop: "{{ groups['k8s_worker'] }}"
#   # when: some_condition

- name: k8s cp | Remove NoSchedule taint form control-plane nodes
  when: k8s_remove_no_schedule_cp_taints
  delegate_to: "{{ groups.k8s_control_plane | flatten | first }}"
  kubernetes.core.k8s_taint:
    kubeconfig: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
    state: absent
    name: "{{ ansible_facts.hostname }}"
    taints:
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: dedicated
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: Get info on nodes
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Node
    name: "{{ inventory_hostname }}"
    kubeconfig: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
  register: __k8s_cp_node
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: k8s cp | Patch Controlplane
  run_once: "{{ item.run_once | default(False) }}"
  when: item.when | default(True)
  kubernetes.core.k8s_json_patch:
    api_version: "{{ item.api_version }}"
    kind: "{{ item.kind }}"
    namespace: "{{ item.namespace | default(omit) }}"
    name: "{{ item.resource_name }}"
    patch: "{{ item.patches }}"
    kubeconfig: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
  loop: "{{ k8s_cp_patches }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    k8s_cp_patches:
      - name: Allow CP to be LoadBalancer target
        api_version: v1
        when: >-
          {{ k8s_remove_no_schedule_cp_taints
          and 'node.kubernetes.io/exclude-from-external-load-balancers'
          in (__k8s_cp_node.resources | first).metadata.labels }}
        kind: Node
        resource_name: "{{ inventory_hostname }}"
        patches:
          - op: remove
            path: /metadata/labels/node.kubernetes.io~1exclude-from-external-load-balancers
  tags: [k8s, k8s-init, k8s-cp-init, k8s-taint]

- name: k8s cp | Get csr resources
  run_once: true
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
    api_version: certificates.k8s.io/v1
    kind: certificatesigningrequests
  register: __k8s_kubelet_csr_list_res
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Approve kubelet csr
  ansible.builtin.command: "kubectl certificate approve {{ __k8s_kubelet_csr }}"
  when: __k8s_kubelet_csr_list_res.resources | json_query(__k8s_kubelet_csr_query) | length > 0
  register: __k8s_worker_role_set
  changed_when: >-
    ("certificatesigningrequest.certificates.k8s.io/" + __k8s_kubelet_csr + " approved")
    in __k8s_worker_role_set.stdout
  environment:
    KUBECONFIG: "{{ k8s_kubeconfig | default('/etc/kubernetes/admin.conf') }}"
  vars:
    __k8s_kubelet_csr_query: "[?spec.username == 'system:node:{{ inventory_hostname }}' && status == `{}`]"
    __k8s_kubelet_csr: >-
      {{ (__k8s_kubelet_csr_list_res.resources
      | json_query(__k8s_kubelet_csr_query)
      | first).metadata.name
      }}
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Setup configs
  ansible.builtin.include_tasks:
    file: setup-configs.yml
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-init-config]

- name: k8s cp | Setup k9s
  when: k8s_install_k9s
  ansible.builtin.include_tasks:
    file: setup-k9s.yml
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-k9s]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-k9s]

- name: k8s cp | Install Helm
  ansible.builtin.include_role:
    name: k8s/helm
    public: true
    apply:
      tags: [k8s, k8s-init, k8s-cp-init, k8s-helm]
  tags: [k8s, k8s-init, k8s-cp-init, k8s-helm]

- name: k8s cp | Setup CNI
  ansible.builtin.include_tasks:
    file: "setup-cni-{{ k8s_cni | lower }}.yml"
  run_once: true
  tags:
    [k8s, k8s-init, k8s-cp-init, k8s-cni, k8s-flannel, k8s-calico, k8s-cilium]
