---
k8s_version: 1.32.2
k8s_dual_stack: false
k8s_install_core_dns: true
k8s_install_kube_proxy: true
k8s_image_repo: registry.k8s.io
k8s_cluster_name: "{{ inventory_dir | basename }}"
k8s_pki_cert_path: /etc/kubernetes/pki
k8s_shared_api_server_endpoint: "{{ ansible_facts.default_ipv4.address }}"
k8s_init_verbose: "{{ lookup('env', 'CI') | default('false', true) | bool == false }}"

# Service & Pod CIDR
k8s_pod_network_cidr: >-
  {{
  [k8s_pod_network_cidr_ipv4,k8s_pod_network_cidr_ipv6]
  | join(",")
  if(k8s_dual_stack) else
  k8s_pod_network_cidr_ipv4
  }}
k8s_service_network_cidr: >-
  {{
  [k8s_service_network_cidr_ipv4,k8s_service_network_cidr_ipv6]
  | join(",")
  if(k8s_dual_stack) else
  k8s_service_network_cidr_ipv4
  }}

k8s_pod_network_cidr_ipv4: 10.244.0.0/16
k8s_service_network_cidr_ipv4: 10.96.0.0/16
k8s_pod_network_cidr_ipv6: fd00:10:244::/48
k8s_service_network_cidr_ipv6: fd00:20:123::/112
k8s_clusterDNS: [10.96.0.10] # change for ipv6 only
k8s_node_cidr_mask_size_ipv4: 24
k8s_node_cidr_mask_size_ipv6: 64

# Kubeadm & Kubelet conf
k8s_kubeadm_conf: '{{ lookup("template", "kubeadm-config.yml.j2") }}'
k8s_kubelet_conf: '{{ lookup("template", "kubelet-conf.yml.j2") }}'
k8s_kubelet_override_conf: '{{ lookup("template", "kubelet-override.yml.j2") }}'
k8s_kubeadm_join_conf: '{{ lookup("template", "kubeadm-join-config.yml.j2") }}'
k8s_etcd_encryption_secret: my-super-secure-k8s-etcd-secret!
k8s_etcd_encryption_conf: '{{ lookup("template", "encryption-config.yml.j2") }}'

# IPs & cert sans
k8s_node_ip: "{{ k8s_node_ip_v4 }}"
k8s_node_ip_v4: "{{ ansible_facts.default_ipv4.address }}"
k8s_node_ip_v6: "{{ ansible_facts.default_ipv6.address }}"
k8s_cert_extra_sans_ipv6: '{{ ["::1"] + ansible_facts.all_ipv6_addresses if(k8s_dual_stack) else [] }}'
k8s_cert_extra_sans: '{{ ["127.0.0.1", "localhost"] + ansible_facts.all_ipv4_addresses + k8s_cert_extra_sans_ipv6 }}'
k8s_install_k9s: true
k8s_install_gvisor: true

# K8s cert key for cp join. Default one is generated
k8_cert_key: none

k8s_kubeadm_skip_phases: []
# # Example
# k8s_kubeadm_skip_phases:
#   - addon/kube-proxy
k8s_controlplane_extra_args: []
# # Example
# k8s_controlplane_extra_args:
#   - name: anonymous-auth
#     value: "false"

######### Taints & Roles #########
k8s_remove_no_schedule_cp_taints: false
k8s_taints: []
# # Example
# k8s_taints:
# See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#taint-v1-core
#   - key: node-role.kubernetes.io/control-plane
#     effect: NoSchedule

######### INIT-Manifests #########
k8s_init_resources_manifests: []
# # Example
# k8s_init_resources_manifests:
#   - name: oauth2-proxy
#     definition: '{{ lookup("template", k8s_init_resources.file) | from_yaml_all }}'
#     namespace: default      # optional
#     state: present          # optional
#     wait: true              # optional

k8s_gVisor_manifest:
  name: gVisor RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-gvisor.yaml') | from_yaml_all }}"

k8s_crun_manifest:
  name: crun RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-crun.yaml') | from_yaml_all }}"

k8s_runc_manifest:
  name: runc RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-runc.yaml') | from_yaml_all }}"

k8s_youki_manifest:
  name: youki RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-youki.yaml') | from_yaml_all }}"

k8s_kata_manifest:
  name: kata RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-kata.yaml') | from_yaml_all }}"

k8s_wasmedge_manifest:
  name: wasi RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-wasi.yaml') | from_yaml_all }}"

k8s_spin_manifest:
  name: spin RuntimeClass
  definition: "{{ lookup('template', role_path + '/files/k8s-runtime-class-spin.yaml') | from_yaml_all }}"

######### CNI #########
# Which CNI flannel, calico or cilium
k8s_cni: calico

# Calico helm chart setup
k8s_calico_ip_pools_ipv4:
  - cidr: '{{ k8s_pod_network_cidr if("," not in k8s_pod_network_cidr) else k8s_pod_network_cidr | split(",") | first }}'
    # natOutgoing: Enabled
    # encapsulation: IPIP
    # nodeSelector: all()
  # - blockSize: 26
  #   cidr: 10.48.0.0/21
  #   encapsulation: IPIP
  #   natOutgoing: Enabled
  #   nodeSelector: all()

k8s_calico_ip_pools_ipv6:
  - blockSize: 122
    cidr: '{{ k8s_pod_network_cidr if("," not in k8s_pod_network_cidr) else k8s_pod_network_cidr | split(",") | last }}'
    encapsulation: None
    natOutgoing: Enabled
    nodeSelector: all()

k8s_calico_chart_version: "{{ null | default(omit) }}"
k8s_calico_helm_values:
  # See https://docs.tigera.io/calico/3.26/getting-started/kubernetes/helm
  # See https://docs.tigera.io/calico/latest/networking/ipam/ipv6#enable-dual-stack
  installation:
    cni:
      type: Calico
    calicoNetwork:
      ipPools: '{{ k8s_calico_ip_pools_ipv4 + k8s_calico_ip_pools_ipv6 if("," in k8s_pod_network_cidr) else k8s_calico_ip_pools_ipv4 }}'

# Cilium helm chart setup
k8s_cilium_chart_version: "{{ null | default(omit) }}"
# See example setup: https://docs.cilium.io/en/stable/helm-reference/
# Kube-proxy-free: https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/
k8s_cilium_helm_values:
  cluster:
    name: "{{ k8s_cluster_name }}"

  k8sServiceHost: "{{ k8s_shared_api_server_endpoint }}"
  k8sServicePort: 6443
  kubeProxyReplacement: true
  rollOutCiliumPods: true
  annotateK8sNode: true

  envoy:
    enabled: false

  # MTU: 1450 # for Hetzner
  operator:
    rollOutPods: true
    replicas: 1
  # bpf:
  #   masquerade: true # needs tp be off when using hostnat

  ipam:
    mode: kubernetes
    operator:
      clusterPoolIPv4PodCIDRList: ["{{ k8s_pod_network_cidr_ipv4 }}"]

  endpointRoutes:
    enabled: true

  loadBalancer:
    algorithm: maglev
    serviceTopology: true
    # acceleration: best-effort # disabled, best-effort or native
    # mode: hybrid

  hubble:
    enabled: true
    rollOutPods: true
    relay:
      enabled: true
      rollOutPods: true
    ui:
      enabled: false
      rollOutPods: true
      ingress:
        enabled: true
        className: nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod-nginx
          nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.oauth-proxy.svc.cluster.local/oauth2/auth
          nginx.ingress.kubernetes.io/auth-signin: https://oauth.k8s.henrikgerdes.me/oauth2/start?rd=https://$host$request_uri
        hosts:
          - hubble.k8s.henrikgerdes.me
        tls:
          - secretName: hubble-ing-tls
            hosts:
              - hubble.k8s.henrikgerdes.me
  # Needed if tailscale services are routed
  socketLB:
    hostNamespaceOnly: true

  # # Native routung
  # routingMode: native
  # ipv4NativeRoutingCIDR: "{{ k8s_cloud_net }}"
  # autoDirectNodeRoutes: false
  # installNoConntrackIptablesRules: true

  # hostFirewall:
  #   enabled: true
  # # BGP native routing
  # bgp:
  #   enabled: true
  #   announce:
  #     loadbalancerIP: true
  # encryption:
  #   enabled: true
  #   type: wireguard
  # # -- Configure the underlying network MTU to overwrite auto-detected MTU.

system_arch_map:
  x86_64: amd64
  aarch64: arm64
