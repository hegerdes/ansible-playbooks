# Set up k8s with kubeadm
---

- name: Init first master node with kubeadm
  block:
    - name: Reset Kubernetes component
      ansible.builtin.command: "kubeadm reset --force"
      register: reset_cluster
      tags: [k8s, k8-init, k8-master-init]

    - name: Copy kubeadm config - not used jet
      ansible.builtin.template:
        src: 'kubeadm-config.yml.j2'
        dest: '{{ target_data_dir | default("") }}/srv/kubeadm-config.yml'
        mode: '0644'
      tags: [k8s, k8-init, k8-master-init]

    - name: Debug - Kubeamd init
      ansible.builtin.debug:
        msg: |
          Running:
          kubeadm init --kubernetes-version={{ k8s_version }} \
            --pod-network-cidr={{ k8s_pod_network_cidr }} \
            --upload-certs \
            --ignore-preflight-errors=NumCPU \
            --control-plane-endpoint={{ k8s_shared_api_server_endpoint }} \
            --apiserver-cert-extra-sans={{ (k8s_cert_extra_sans + [k8s_shared_api_server_endpoint]) | unique | join(",") }} \
            --apiserver-advertise-address={{ ansible_facts.all_ipv4_addresses | ansible.utils.reduce_on_network(k8s_cloud_net) | first if (k8s_cloud_net | default("none") != "none") else k8s_kubelet_advertise_address_bind | default(ansible_facts.default_ipv4.address) }} \
            --certificate-key={{ k8_cert_key if (k8_cert_key != "none") else k8s_kubeadm_cert_key }} \
            {{ k8s_kubeadm_opts }} \
            {{ k8s_init_opts }}
      tags: [k8s, k8s-prepare, k8s-base, k8s-test]

    - name: Init Kubernetes cluster
      when: reset_cluster is succeeded
      ansible.builtin.command: |
          kubeadm init --kubernetes-version={{ k8s_version }} \
            --pod-network-cidr={{ k8s_pod_network_cidr }} \
            --upload-certs \
            --ignore-preflight-errors=NumCPU \
            --control-plane-endpoint={{ k8s_shared_api_server_endpoint }} \
            --apiserver-cert-extra-sans={{ (k8s_cert_extra_sans + [k8s_shared_api_server_endpoint]) | unique | join(",") }} \
            --apiserver-advertise-address={{ ansible_facts.all_ipv4_addresses | ansible.utils.reduce_on_network(k8s_cloud_net) | first if (k8s_cloud_net | default("none") != "none") else k8s_kubelet_advertise_address_bind | default(ansible_facts.default_ipv4.address) }} \
            --certificate-key={{ k8_cert_key if (k8_cert_key != "none") else k8s_kubeadm_cert_key }} \
            {{ k8s_kubeadm_opts }} \
            {{ k8s_init_opts }}
      register: init_cluster
      tags: [k8s, k8-init, k8-master-init]

    - name: Enable and check kubelet service
      ansible.builtin.systemd:
        name: kubelet
        daemon_reload: true
        state: started
        enabled: true
      ignore_errors: '{{ ansible_check_mode }}'
      tags: [k8s, k8-init, k8-master-init]

    - name: Debug - Kubeadm init res
      ansible.builtin.debug:
        var: init_cluster.stderr_lines + init_cluster.stdout_lines
      tags: [k8s, k8-init, k8-master-init]

  rescue:
    - name: Cleanup - Reset Kubernetes component
      ansible.builtin.command: "kubeadm reset --force"
      changed_when: true
      register: reset_cluster
      tags: [k8s, k8-init, k8-master-init]

    - name: Print Error Info
      ansible.builtin.debug:
        msg: 'A error occured while bootstraping the first master node. The cluster was reset. Please see the error meassage below:'
      tags: [k8s, k8-init, k8-master-init]

    - name: Kubeadm Error
      ansible.builtin.debug:
        var: init_cluster
      tags: [k8s, k8-init, k8-master-init]

    - name: Exit with error code!
      ansible.builtin.command: /bin/false
      changed_when: false
      tags: [k8s, k8-init, k8-master-init]
