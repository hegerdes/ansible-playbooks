# Install Docker
---
- name: Install needed packages
  ansible.builtin.apt:
    name:
      - curl
      - gnupg
      - cifs-utils
      - lsb-release
      - yamllint
      - python3-debian
      - ca-certificates
      - apt-transport-https
      - apparmor
      - systemd-container
      - uidmap # needed for rootless
      - slirp4netns # needed for rootless
      - dbus-user-session # needed for rootless
      - fuse-overlayfs # needed for rootless
    state: present
    update_cache: true
    install_recommends: true
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Add Docker repository
  ansible.builtin.deb822_repository:
    name: docker
    types: [deb]
    uris: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
    signed_by: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    suites: ["{{ ansible_distribution_release | lower }}"]
    components: [stable]
    state: present
    enabled: true
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Install docker
  ansible.builtin.apt:
    state: present
    install_recommends: false
    update_cache: true
    name:
      - "containerd.io"
      - "docker-{{ gitlab_runner_docker_edition }}"
      - "docker-{{ gitlab_runner_docker_edition }}-cli"
      - "docker-{{ gitlab_runner_docker_edition }}-rootless-extras"
      - "docker-compose-plugin"
      - "docker-buildx-plugin"
      - "python3-setuptools"
      - "python3-jsondiff"
      - "python3-docker"
      - "python3-yaml"
      - "gnupg2"
      - "pass"
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Ensure /etc/docker/ directory exists
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: "0755"
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Configure Docker daemon options
  ansible.builtin.copy:
    content: "{{ gitlab_runner_docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: "0644"
    validate: dockerd --validate --config-file=%s
  when: gitlab_runner_docker_daemon_options.keys() | length > 0 and not gitlab_runner_docker_rootless
  notify: Restart Docker
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Ensue users are created and added to the Docker group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: [docker]
    append: true
    state: present
  with_items: "{{ gitlab_runner_docker_users }}"
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Log into Docker registries
  when: not gitlab_runner_docker_rootless
  community.docker.docker_login:
    registry_url: '{{ item.registry | default("https://index.docker.io/v1/") }}'
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    reauthorize: true
  loop: "{{ gitlab_runner_docker_registries }}"
  loop_control:
    label: '{{ item.registry | default("https://index.docker.io/v1/") }}'
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Ensure containerd root is started and enabled at boot
  ansible.builtin.service:
    name: containerd
    state: "{{ 'stopped' if gitlab_runner_docker_rootless else 'started' }}"
    enabled: "{{ not gitlab_runner_docker_rootless }}"
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Ensure Docker root is started and enabled at boot
  ansible.builtin.service:
    name: docker
    state: "{{ 'stopped' if gitlab_runner_docker_rootless else 'started' }}"
    enabled: "{{ not gitlab_runner_docker_rootless }}"
  tags: [gitlab-runner, gitlab-runner-docker-install]

- name: Remove file root docker socket when rootless
  when: gitlab_runner_docker_rootless
  ansible.builtin.file:
    path: /var/run/docker.sock
    state: absent
  tags: [gitlab-runner, gitlab-runner-docker-install]
