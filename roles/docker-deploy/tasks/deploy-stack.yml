# Install app stack
---
- name: Copy compose|stack files
  when: item[-3:] == "yml" or item[-4:] == "ymal"
  ansible.builtin.copy:
    src: "{{ docker_deploy_src_config_files + item }}"
    dest: "{{ docker_deploy_dst_config_files + item }}"
    mode: "0644"
    validate: yamllint %s
  loop: "{{ docker_project.compose_files }}"
  tags: [docker-deploy]

- name: Configuring compose|stack files
  when: item[-2:] == "j2"
  ansible.builtin.template:
    src: "{{ docker_deploy_src_config_files + item }}"
    dest: "{{ docker_deploy_dst_config_files + item[:-3] }}"
    mode: "0644"
  loop: "{{ docker_project.compose_files }}"
  tags: [docker-deploy]

- name: Copy template files
  ansible.builtin.template:
    src: "{{ docker_deploy_src_config_files + item.src }}"
    dest: "{{ docker_deploy_dst_config_files + item.dest }}"
    mode: '{{ item.mode | default("0644") }}'
  loop: "{{ docker_project.conf_files | default([]) }}"
  tags: [docker-deploy]

- name: Create absolut paths for stack files
  ansible.builtin.set_fact:
    compose_files_stack: '{{ compose_files_stack | default([]) + ["".join((docker_deploy_dst_config_files, item if(item[-3:] == "yml") else item[:-3]))] }}'
  loop: "{{ docker_project.compose_files | list }}"
  tags: [docker-deploy]

- name: Getting generated stack file(s)
  ansible.builtin.slurp:
    src: "{{ item }}"
  loop: "{{ compose_files_stack | list }}"
  register: deploy_compose_conetent
  tags: [docker-deploy]

- name: Saving generated stack file(s)
  ansible.builtin.fetch:
    dest: "{{ docker_deploy_artifact_dir }}"
    flat: true
    src: "{{ item }}"
  loop: "{{ compose_files_stack | list }}"
  tags: [docker-deploy]

- name: Extracting Docker images...
  when: item.content is defined
  ansible.builtin.set_fact:
    deploy_compose_conetent_img: '{{ deploy_compose_conetent_img | default([]) + item.content | b64decode | from_yaml | json_query("services") | default({}) | dict2items | map(attribute="value.image") }}'
  loop: "{{ deploy_compose_conetent.results | default([]) }}"
  loop_control:
    label: "{{ item.source }}"
  tags: [docker-deploy]

- name: Check Docker images
  community.docker.docker_image:
    name: '{{ item.split(":")[0] if(item | regex_findall(":") | length <= 1) else item.split(":")[0] + ":" + item.split(":")[1] }}'
    tag: '{{ item.split(":")[1] | default("latest") if(item | regex_findall(":") | length <= 1) else item.split(":")[2] }}'
    source: pull
    force_source: true
  loop: "{{ deploy_compose_conetent_img | default([]) | unique }}"
  register: docker_image_pull_res
  tags: [docker-deploy]

- name: Format Docker Image-Facts
  when: not ansible_check_mode
  ansible.builtin.set_fact:
    image_info_data: '{{ image_info_data | default([]) + [ {(item.item | string | replace(":","-") ): item.image.Config.Labels }] }}'
  loop: "{{ docker_image_pull_res.results }}"
  # loop: '{{ docker_image_pulled_res.results }}'
  loop_control:
    label: "{{ item.item }}"
  tags: [docker-deploy]

- name: Show image labels
  ansible.builtin.debug:
    var: image_info_data
  tags: [docker-deploy]

- name: Deploy app-stack via stack
  when: docker_deploy_use_swarm_mode and swarm_info.docker_swarm_manager
  community.docker.docker_stack:
    state: present
    name: "{{ docker_project.name }}"
    prune: "{{ docker_deploy_prune_old_services }}"
    resolve_image: always
    with_registry_auth: true
    compose: "{{ compose_files_stack | default([]) | list }}"
  notify: Wait for services to come up
  tags: [docker-deploy]

- name: Deploy app-stack via compose
  when: not docker_deploy_use_swarm_mode
  community.docker.docker_compose_v2:
    project_name: "{{ docker_project.name }}"
    pull: always
    remove_orphans: "{{ docker_deploy_prune_old_services }}"
    project_src: "{{ docker_deploy_dst_config_files }}"
    files: "{{ compose_files_stack | default([]) | list }}"
  notify: Wait for services to come up
  tags: [docker-deploy]

- name: Cleaning up facts
  ansible.builtin.set_fact:
    compose_files_stack: []
    deploy_compose_conetent_img: []
  tags: [docker-deploy]

- name: Ensure handlers are notified now
  ansible.builtin.meta: flush_handlers
  tags: [docker-deploy]
