# List pending updates
---
- name: Update apt cache
  ansible.builtin.apt:
   update_cache: true
  tags: [maintenance, os-updates]

- name: Get upgradable list
  ansible.builtin.command: apt list --upgradable
  register: main_updates
  changed_when: false
  tags: [maintenance, os-updates]

- name: No updates
  when: main_updates.stdout_lines | length == 1
  ansible.builtin.debug:
    msg: 'No updates found'
  tags: [maintenance, os-updates]

- name: Format update string I
  when: main_updates.stdout_lines | length > 1
  ansible.builtin.set_fact:
    updates: '{{ [item | replace("[","") | replace("]","") | replace(","," ") ] + updates | default([]) }}'
  loop: '{{ main_updates.stdout_lines[1:] }}'
  tags: [maintenance, os-updates]

- name: Format update string II
  when: hostvars[item].updates is defined
  run_once: true
  ansible.builtin.set_fact:
    all_updates: '{{ all_updates | default({}) | combine({item: hostvars[item].updates}) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Format update string III
  when: hostvars[item].updates is defined
  run_once: true
  ansible.builtin.set_fact:
    all_updates: '{{ all_updates | default({}) | combine({"failed_hosts": ansible_play_hosts_all | difference(ansible_play_batch) | default([]), "project_info": {"project_url": lookup("env", "CI_PROJECT_URL") | default("none", true), "project_id": lookup("env", "CI_PROJECT_ID") | default("none", true)} }, recursive=true ) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Print updates
  when: hostvars[item].updates is defined
  run_once: true
  ansible.builtin.debug:
    var: hostvars[item].updates
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Save update file to ...
  when: all_updates is defined
  become: false
  run_once: true
  ansible.builtin.copy:
    content: "{{ all_updates }}"
    dest: "/tmp/{{ inventory_dir | basename + '-updates' + lookup('pipe', 'date +\"-%Y-%m-%d\"') }}.json"
  delegate_to: localhost
  tags: [maintenance, os-updates]

- name: Post log for performed update-scan
  when: ansible_play_hosts_all | last == inventory_hostname and maintenance_post_to_git | bool
  ansible.builtin.include_tasks: shared/gitlab-update-json-file.yml
  vars:
    gitlab_conf:
      branch: '{{ maintenance_git_branch }}'
      token: '{{ maintenance_git_token }}'
      content: '{{ {ansible_date_time.date: "Performed update check on: " + ansible_play_hosts_all | join(",")} }}'
      email: '{{ maintenance_git_mail }}'
      name: '{{ maintenance_git_name }}'
      commit_message: 'Searched for updates on {{ansible_date_time.date}}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/repository/files/{{ inventory_dir | basename }}-host-updates%2Fsearched-update-log.json'
  tags: [maintenance, os-updates]

- name: Post update log to GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_updates is defined and maintenance_post_to_git | bool
  ansible.builtin.include_tasks: shared/gitlab-post-log.yml
  vars:
    gitlab_conf:
      branch: '{{ maintenance_git_branch }}'
      token: '{{ maintenance_git_token }}'
      content: '{{ all_updates }}'
      email: '{{ maintenance_git_mail }}'
      name: '{{ maintenance_git_name }}'
      commit_message: 'Added pending updates on {{ansible_date_time.date}}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/repository/files/{{ inventory_dir | basename }}-host-updates%2F{{ ansible_date_time.date + "-" + ansible_date_time.hour + "-" + ansible_date_time.minute }}-updates.json'
  tags: [maintenance, os-updates]

- name: Get issue on GitLab
  when: maintenance_post_to_git and all_updates is defined
  ansible.builtin.include_tasks: shared/gitlab-get-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues?labels=aptPendingUpdates,{{ inventory_dir | basename }}&state=opened'
      token: '{{ maintenance_git_token }}'
  run_once: true
  tags: [maintenance, os-updates]

- name: Update issue on GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and maintenance_post_to_git and not maintenance_run_upgrades and all_updates is defined
  ansible.builtin.include_tasks: shared/gitlab-post-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues/{{ main_reop_get_issue_res.json | json_query("[0].iid") if (main_reop_get_issue_res.json is defined and main_reop_get_issue_res.json | length > 0) else ""}}'
      method: '{{"PUT" if (main_reop_get_issue_res.json is defined and main_reop_get_issue_res.json | length > 0) else "POST"}}'
      token: '{{ maintenance_git_token }}'
      response_status: '{{ 200 if (main_reop_get_issue_res.json is defined and main_reop_get_issue_res.json | length > 0) else 201 }}'
      body:
        title: '{{ inventory_dir | basename }}-{{ ansible_date_time.date }} System Updates'
        labels: 'maintenance,aptPendingUpdates,{{ inventory_dir | basename }}'
        assignee_id: '{{ maintenance_git_assignee_id }}'
        description: |
          Updates:
          ```yml
          {{ all_updates | to_nice_yaml(width=512) }}
          ```
  tags: [maintenance, os-updates]

- name: Notify via Mattermost
  when: ansible_play_hosts_all | last == inventory_hostname and maintenance_post_to_git and not maintenance_run_upgrades and all_updates is defined and main_reop_issue_res.json is defined and maintenance_mattermost_hook is defined
  ansible.builtin.uri:
    url: '{{ maintenance_mattermost_hook }}'
    method: POST
    body_format: json
    headers:
      Content-Type: application/json
    body:
      text: ':mailbox: Found new System-Updates for {{ lookup("env", "CI_PROJECT_NAME") | default(inventory_dir | basename, true) }}. [Take a look here!]({{ main_reop_issue_res.json.web_url }})'
      username: GitLab-CI-Maintenance
      icon_url: "https://about.gitlab.com/images/press/logo/png/gitlab-logo-500.png"
      props:
        origin: gitlab
        job: os-updates-info
        project: '{{ lookup("env", "CI_PROJECT_NAME") | default(inventory_dir | basename, true) }}'
        card: |
          # Pending Updates:
          {% for key, update_list in all_updates.items() if key not in ("failed_hosts", "project_info")  %}
          **{{key}}:**
            {% for update in update_list %}
           * [{{update}}](https://packages.debian.org/search?keywords={{update.split("/")[0]}})
            {% endfor %}

          {% endfor %}
    status_code: 200
  ignore_errors: true
  tags: [maintenance, os-updates]

- name: Upgrade packages
  when: maintenance_run_upgrades | bool and item.split("/")[0] not in maintenance_hold_back_updates
  ansible.builtin.apt:
    name: '{{ item.split("/")[0] }}'
    state: latest
  loop: '{{ updates | default([]) }}'
  register: main_updated_packages
  tags: [maintenance, os-updates]

- name: Check for reboot
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: main_reboot_needed
  tags: [maintenance, os-updates]

- name: Reoot needed?
  ansible.builtin.debug:
    msg: 'Reboot needed: {{ main_reboot_needed.stat.exists }}'
  tags: [maintenance, os-updates]

- name: Format update result string I
  when: maintenance_run_upgrades | bool
  ansible.builtin.set_fact:
    performed_updates: '{{ performed_updates | default({}) | combine({item.item.split("/")[0]: item.stdout_lines[3:] | default("") })}}'
  loop: '{{ main_updated_packages.results }}'
  loop_control:
    label: '{{ item.item.split("/")[0] }}'
  tags: [maintenance, os-updates]

- name: Format update result string II
  when: hostvars[item].performed_updates is defined
  run_once: true
  ansible.builtin.set_fact:
    all_performed_updates: '{{ all_performed_updates | default({}) | combine({item: hostvars[item].performed_updates, "reboots": {item: hostvars[item].main_reboot_needed.stat.exists}}, recursive=true) }}'
  with_items: '{{ groups.all }}'
  tags: [maintenance, os-updates]

- name: Post update log to GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_performed_updates is defined and maintenance_post_to_git | bool
  ansible.builtin.include_tasks: shared/gitlab-post-log.yml
  vars:
    gitlab_conf:
      branch: '{{ maintenance_git_branch }}'
      token: '{{ maintenance_git_token }}'
      content: '{{ all_performed_updates }}'
      email: '{{ maintenance_git_mail }}'
      name: '{{ maintenance_git_name }}'
      commit_message: 'Installed the following updates on {{ansible_date_time.date}}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/repository/files/{{ inventory_dir | basename }}-host-updates%2F{{ ansible_date_time.date + "-" + ansible_date_time.hour + "-" + ansible_date_time.minute }}-performed-updates.json'
  tags: [maintenance, os-updates]

- name: Comment on issue on GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_updates is defined and maintenance_post_to_git and maintenance_run_upgrades
  ansible.builtin.include_tasks: shared/gitlab-post-issue.yml
  vars:
    gitlab_conf:
      token: '{{ maintenance_git_token }}'
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues/{{ main_reop_get_issue_res.json | json_query("[0].iid") if (main_reop_get_issue_res.json is defined and main_reop_get_issue_res.json | length > 0) else ""}}/discussions'
      method: POST
      response_status: 201
      body:
        body: |
          Updates performed on {{ ansible_date_time.date + "-" + ansible_date_time.hour + "-" + ansible_date_time.minute }} via CI {{"[Job " + lookup("env", "CI_JOB_ID") + "](" + lookup("env", "CI_JOB_URL") + ")" if(lookup("env", "CI_JOB_URL") | default("none", true) != "none") }} by {{ lookup("env", "GITLAB_USER_NAME") | default("a Bot", true) }}.

          See the log here: {{ main_reop_get_issue_res.json | json_query("[0].web_url") | split("/-/") | first }}/-/blob/main/{{ inventory_dir | basename }}-host-updates/{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}-{{ ansible_date_time.minute }}-performed-updates.json
  tags: [maintenance, os-updates]


- name: Close issue on GitLab
  when: ansible_play_hosts_all | last == inventory_hostname and all_updates is defined and maintenance_post_to_git and maintenance_run_upgrades
  ansible.builtin.include_tasks: shared/gitlab-post-issue.yml
  vars:
    gitlab_conf:
      url: '{{ maintenance_git_host }}/api/v4/projects/{{ maintenance_git_repo }}/issues/{{ main_reop_get_issue_res.json | json_query("[0].iid") if (main_reop_get_issue_res.json is defined and main_reop_get_issue_res.json | length > 0) else ""}}?state_event=close'
      token: '{{ maintenance_git_token }}'
      format: json
      method: PUT
      response_status: 200
  tags: [maintenance, os-updates]

- name: Resetting vars
  when: ansible_play_hosts_all | last == inventory_hostname and all_updates is defined and maintenance_post_to_git and maintenance_run_upgrades
  run_once: true
  ansible.builtin.set_fact:
    all_updates: {}
    main_updates: {}
  tags: [maintenance, os-updates]
