# Testing

- hosts: localhost
  become: False
  gather_facts: True
  vars:
    k8s_pod_network_cidr: 10.10.10.10/24
    k8s_init_resources_manifests: []
    k8s_init_default_resources: []
    k8s_install_gvisor: false
    k8s_version: 1.28.7

    azure_dns_records:
    - { host: "test.demeter-discovery.com", value: "127.0.0.1" }
    - { host: "test.k8s.demeter-discovery.com", value: "127.0.0.1", type: A, ttl: 3600 }
    - { host: "test.k8s.demeter-discovery.com", value: "::1", type: AAAA, ttl: 3600 }

    k8s_containerd_query: "assets[?ends_with(name, '{{ ansible_facts.system | lower }}-{{ containerd_arch_map[ansible_facts.architecture] }}.tar.gz' )].browser_download_url"
    k8s_runc_query: "assets[?ends_with(name, '{{ containerd_arch_map[ansible_facts.architecture] }}' )].browser_download_url"
    k8s_cni_plugins_query: "assets[?starts_with(name, 'cni-plugins-{{ ansible_facts.system | lower }}-{{ containerd_arch_map[ansible_facts.architecture] }}' )].browser_download_url"
    k8s_cni_plugins_version: latest
    k8s_containerd_version: latest
    k8s_runc_version: latest
    keyvault: 'https://{{ keyvault_name }}.vault.azure.net'
    keyvault_name: hegerdes
    # k8s_containerd_version: 1.6.22
    # k8s_runc_version: 1.17
    # k8s_cni_plugins_version: 1.2.0

    k8s_containerd_download_url_default: '{{ lookup("url", "https://api.github.com/repos/containerd/containerd/releases/latest") | from_json | json_query(k8s_containerd_query) | first if(k8s_containerd_version == "latest") else "https://github.com/containerd/containerd/releases/download/v" + k8s_containerd_version + "/containerd-" + k8s_containerd_version + "-" + ansible_facts.system | lower + "-" + containerd_arch_map[ansible_facts.architecture] + ".tar.gz" }}'

    k8s_runc_download_url_default: '{{ lookup("url", "https://api.github.com/repos/opencontainers/runc/releases/latest") | from_json | json_query(k8s_runc_query) | first if(k8s_runc_version == "latest") else "https://github.com/opencontainers/runc/releases/download/v" + k8s_runc_version + "/runc." + containerd_arch_map[ansible_facts.architecture] }}'

    k8s_cni_plugin_download_url_default: '{{ lookup("url", "https://api.github.com/repos/containernetworking/plugins/releases/latest") | from_json | json_query(k8s_cni_plugins_query) | first if(k8s_cni_plugins_version == "latest") else "https://github.com/containernetworking/plugins/releases/download/v" + k8s_cni_plugins_version + "/cni-plugins-" + ansible_facts.system | lower + "-" + containerd_arch_map[ansible_facts.architecture] + "-v" + k8s_cni_plugins_version + ".tgz" }}'

    containerd_arch_map:
      x86_64: amd64
      aarch64: arm64
    k8s_hcloud_csi_version: v2.3.2
  tasks:
  # - debug:
  #     var: ansible_facts

  - debug:
      msg: '{{ (item.host | split("."))[-2:] | join(".") }}'
    loop: '{{ azure_dns_records }}'

  - include_role:
      name: azure-dns

  - debug:
      var: lookup("url", "https://raw.githubusercontent.com/hetznercloud/csi-driver/" + k8s_hcloud_csi_version + "/deploy/kubernetes/hcloud-csi.yml", split_lines=False) | from_yaml_all
  - debug:
      msg: "K8s version {{ k8s_version }} type: {{ k8s_version | type_debug  }}"
  - debug:
      msg: "{{ lookup('azure.azcollection.azure_keyvault_secret', 'github-oauth-demo-client-id', vault_url=keyvault) }}"

  - name: Save kubeconf in keyvault
    ignore_errors: true
    azure.azcollection.azure_rm_keyvaultsecret:
      secret_name: "test"
      auth_source: cli
      secret_value: 'test'
      keyvault_uri: "{{ keyvault }}"
      tags:
        origin: ansible

  # - debug:
  #     msg: '{{ k8s_containerd_download_url_default }}'

  # - debug:
  #     msg: '{{ k8s_runc_download_url_default }}'

  # - debug:
  #     msg: '{{ k8s_cni_plugin_download_url_default }}'

  # - name: Install containerd
  #   become: true
  #   ansible.builtin.unarchive:
  #     src: '{{ k8s_containerd_download_url | default(k8s_containerd_download_url_default) }}'
  #     dest: /usr/local
  #     remote_src: true
  #     creates: /usr/local/bin/containerd
  #   retries: 3

  # - name: Install runc
  #   become: true
  #   ansible.builtin.get_url:
  #     url: '{{ k8s_runc_download_url | default(k8s_runc_download_url_default) }}'
  #     dest: /usr/local/runc
  #     mode: '0755'
  #   retries: 3

  # - name: Install cni plugins
  #   become: true
  #   ansible.builtin.unarchive:
  #     src: '{{ k8s_cni_plugin_download_url | default(k8s_cni_plugin_download_url_default) }}'
  #     dest: /opt/cni/bin
  #     remote_src: true
  #     creates: /opt/cni/bin/loopback
  #   retries: 3

  # - name: Install containerd service
  #   become: true
  #   ansible.builtin.get_url:
  #     url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
  #     dest: /etc/systemd/system/containerd.service
  #     mode: '0600'

    # loop_control:
    #   loop_var: k8s_init_resources
  # vars_files:
  #   - '{{ inventory_dir }}/secrets/vault.yml'
  # roles:
    # - k8s/hetzner
    # - k8s/ingress-nginx
    # - k8s/monitoring
    # - k8s/deploy

# - hosts: localhost
#   become: true
#   gather_facts: true
#   roles:
#     - hashicorp/packer

# - hosts: localhost
#   become: false
#   gather_facts: true
#   vars:
#     k8s_kubeconfig: ~/.kube/config
#   roles:
#     # - k8s/hetzner
#     # - k8s/certmanager
#     # - k8s/ingress-nginx
#     # # - k8s/ingress-traefik
#     # - k8s/metrics
#     # - k8s/longhorn
#     # - k8s/grafana-mimir
#     # - k8s/metallb
#     - k8s/deploy
#     # - k8s/argocd
#     # - k8s/rancher
#   # vars_files:
#   #   - '{{ inventory_dir }}/secrets/vault.yml'

    # - debug:
    #     msg: '{{ lookup("url", "https://api.github.com/repos/prometheus/node_exporter/releases/latest") | from_json | json_query(query) | select("search", crun_arch_map[ansible_facts.architecture]) | list | first }}'
    #   vars:
    #     # query: assets[*].browser_download_url
    #     query: assets[?contains(name, 'linux')].browser_download_url
    #     crun_arch_map:
    #       x86_64: amd64
    #       aarch64: arm64

    # - debug:
    #     msg: '{{ lookup("az_keyvault", "test-secret", vault_url=keyvault ) }}'
    #   vars:
    #     keyvault: https://hegerdes.vault.azure.net

# - name: Get promtail URL
#   when: promtail_check_result.stdout == ""
#   ansible.builtin.shell: |
#     curl --silent https://api.github.com/repos/grafana/loki/releases/latest | grep browser_download_url | cut -d '"' -f 4 | grep promtail-linux-amd
#   register: promtail_url
#   tags: [promtail, monitoring]

  # - name: Give users access to multiple databases
  #   debug:
  #     msg: "{{ ingress_class[0] }} {{ ingress_class[1] }}"
  #   loop: "{{ ['nginx', 'traefik'] | product(['lets-encrypt-issuer-staging.yml', 'lets-encrypt-issuer-prod.yml']) | list }}"
  #   loop_control:
  #     loop_var: ingress_class
  # tasks:
  # - name: Determine latest wasm crun GitHub release
  #   uri:
  #     url: "https://api.github.com/repos/hegerdes/publish/releases/latest"
  #     body_format: json
  #   register: _k8s_wasm_crun_github_release
  #   until: _k8s_wasm_crun_github_release.status == 200
  #   run_once: true
  #   retries: 3
  #   tags: [k8s, k8s-prepare, k8s-base]

  # - name: debug
  #   debug:
  #     msg: '{{ ansible_facts.architecture }}'
  #   tags: [k8s, k8s-prepare, k8s-base]

  # - name: debug
  #   debug:
  #     msg: '{{ _k8s_wasm_crun_github_release.json | json_query(query) | select("search", ansible_facts.architecture) | list }}'
  #   vars:
  #     query: assets[?starts_with(name, 'crun')].browser_download_url
  #   tags: [k8s, k8s-prepare, k8s-base]

  # - name: Install official crun
  #   ansible.builtin.get_url:
  #     url: https://github.com/containers/crun/releases/download/{{ k8s_crun_version }}/crun-{{ k8s_crun_version }}-linux-{{ crun_arch_map[ansible_facts.architecture] }}
  #     dest: /tmp/crun_tmp
  #     mode: '0754'
  #   vars:
  #     k8s_crun_version: 1.8.4
  #     crun_arch_map:
  #       x86_64: amd64
  #       aarch64: arm64
  #   tags: [k8s, k8s-prepare, k8s-base]

  # - name: Download crun
  #   ansible.builtin.unarchive:
  #     src: '{{ _k8s_wasm_crun_github_release.json | json_query(query) | first }}'
  #     dest: /tmp
  #     remote_src: true
  #     creates: /tmp/crun
  #   retries: 3
  #   vars:
  #     query: assets[?starts_with(name, 'crun')].browser_download_url
  #   tags: [k8s, k8s-prepare, k8s-base]
